
-- Obfuscated (base64-wrapped) script
-- Generated by ChatGPT at user request. This will decode and execute the original Lua payload.
local b64 = [[local v0 = {}
local l_RunService_0 = game:GetService("RunService");
local l_Debris_0 = game:GetService("Debris");
v0.Load = function(_, v4, v5, v6, v7, v8, v9) --[[ Line: 8 ]] --[[ Name: Load ]]
        -- upvalues: l_RunService_0 (copy)
        if v5 == nil then
            return;
        elseif v4 == nil then
            return;
        else
            v6 = v6 or 0;
            v9 = v9 or 1;
            local l_Humanoid_0 = v4:FindFirstChildOfClass("Humanoid");
            if l_Humanoid_0 == nil then
                local l_AnimationController_0 = v4:FindFirstChildOfClass("AnimationController");
                if l_AnimationController_0 then
                    l_Humanoid_0 = l_AnimationController_0;
                else
                    return;
                end;
            end;
            if l_Humanoid_0 then
                local l_Animator_0 = l_Humanoid_0:FindFirstChildOfClass("Animator");
                if not l_Animator_0 then
                    l_Animator_0 = Instance.new("Animator");
                    l_Animator_0.Parent = l_Humanoid_0;
                end;
                local v13 = l_Animator_0:LoadAnimation(v5);
                local l_Action_0 = Enum.AnimationPriority.Action;
                l_Action_0 = if v7 == nil then v13.Priority or l_Action_0 else v7;
                if v8 == nil then
                    v8 = v13.Looped;
                end;
                v13.Looped = v8;
                v13.Priority = l_Action_0;
                v13:AdjustSpeed(v9);
                v13.Stopped:Once(function() --[[ Line: 48 ]]
                    -- upvalues: v13 (copy)
                    v13:Destroy();
                end);
                if l_RunService_0:IsStudio() then

                end;
                return v13;
            else
                return;
            end;
        end;
    end

v0.loadAnimation = function(v17, v18, v19, v20, v21, v22) --[[ Line: 59 ]] --[[ Name: loadAnimation ]]
    -- upvalues: v15 (copy)
    local v23 = v0:Load(v17, v18, v19, v20, v21, v22);
    if not v23 then
        return;
    else
        return v23;
    end;
end;

v0.play = function(v3, v4, v5, v6)
        if v3 == nil then
            return;
        else
            v5 = v5 or {};
            if typeof(v3) == "table" then
                for v7 = 1, #v3 do
                    if v3[v7] == nil then
                        table.remove(v3, v7);
                    end;
                end;
                v3 = v3[math.random(1, #v3)]:Clone();
            else
                v3 = v3:Clone();
            end;
            for v8, v9 in pairs(v5) do
                v3[v8] = v9;
            end;
            v3.Parent = v4;
            if v6 then
                v3.PlayOnRemove = true;
                v3:Destroy();
            else
                v3:Play();
                if l_RunService_0:IsServer() == true then
                    if v3.Looped == false then
                        l_Debris_0:AddItem(v3, v3.TimeLength + 1);
                    end;
                elseif l_RunService_0:IsClient() == true and v3.Looped == false then
                    v3.Ended:Connect(function() --[[ Line: 41 ]]
                        -- upvalues: v3 (ref)
                        v3:Destroy();
                    end);
                end;
            end;
            return v3;
        end;
    end
    

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ByteNetReliable = ReplicatedStorage:WaitForChild("ByteNetReliable")

local function createBuffer(packetType: number, inputString: string, flag: number): buffer

    local stringBytes = {string.byte(inputString, 1, #inputString)}
    local bufferSize = 1 + 1 + 1 + #inputString + 1
    local b = buffer.create(bufferSize)
    
    local offset = 0
    
    buffer.writeu8(b, offset, packetType)
    offset += 1
    
    buffer.writeu8(b, offset, #inputString)
    offset += 1
    
    buffer.writeu8(b, offset, 0)
    offset += 1
    
    for i, byte in ipairs(stringBytes) do
        buffer.writeu8(b, offset + i - 1, byte)
    end
    offset += #inputString
    
    buffer.writeu8(b, offset, flag)
    
    return b
end

local function fireEvent(packetType: number, inputString: string, flag: number, args: table)
    local buffer = createBuffer(packetType, inputString, flag)
    firesignal(ByteNetReliable.OnClientEvent, buffer, {args})
end

local packetType = 17
local flag = 1 
pcall(function()
    require(game:GetService("ReplicatedStorage").preloadanimations)
end)
game:GetObjects("rbxassetid://120361569548704")
game:GetObjects("rbxassetid://130755098980898")
OrionLib = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
key = nil
Window = OrionLib:CreateWindow({
    Name = "Lloyd HUB | Azure Latch Fake Styles/MVPs Script",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Lloyd HUB",
    LoadingSubtitle = "by lloydgarmadon43 and keatonma_sk",
    Theme = "DarkBlue", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "Azure Latch", -- Create a custom folder for your hub/game
       FileName = "Lloyd Hub"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "hYEUX376xZ", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Lloyd Hub",
       Subtitle = "Key System",
       Note = "key in discord btw (changes every 3 days.)", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"zB7kL2xT9jQpW1vY8rD0aF"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
Isagi = Window:CreateTab("Isagi", 4483345998)
 Nagi = Window:CreateTab("Nagi", 4483345998)
 Chigiri = Window:CreateTab("Chigiri", 4483345998)
 Shidou = Window:CreateTab("Shidou", 4483345998)
 Sae = Window:CreateTab("Sae", 4483345998)
 Rin = Window:CreateTab("Rin", 4483345998)
 Kaiser = Window:CreateTab("Kaiser", 4483345998)
 DonLorenzo = Window:CreateTab("Don Lorenzo", 4483345998)
 Gagamaru = Window:CreateTab("Gagamaru", 4483345998)
 Aiku = Window:CreateTab("Aiku", 4483345998)
 King = Window:CreateTab("King", 4483345998)
 Bachira = Window:CreateTab("Bachira", 4483345998)
 Yukimiya = Window:CreateTab("Yukimiya", 4483345998)
 MVP = Window:CreateTab("MVPs", 4483345998)
 Sakuya = Window:CreateTab("Sakuya", 4483345998)
 Exe = Window:CreateTab("Exe", 4483345998)
 Ronaldo = Window:CreateTab("Ronaldo", 4483345998)
 Chapter = Window:CreateTab("Chapter", 4483345998)
 Other = Window:CreateTab("Other", 4483345998)

 
 IsagiSec = Isagi:CreateSection("Striker Of Blue Lock")
 
shared.ball = nil
shared.ball = game:GetObjects("rbxassetid://104337640012440")[1]
shared.ball.Parent = game.Players.LocalPlayer.Character
shared.ball.Anchored = true
shared.ball.ball.Part0 = game.Players.LocalPlayer.Character.PrimaryPart
shared.ball.Anchored = false
shared.ball.Transparency = 1
game.Players.LocalPlayer.CharacterAdded:Connect(function()
    shared.ball = game:GetObjects("rbxassetid://104337640012440")[1]
    shared.ball.Parent = game.Players.LocalPlayer.Character
    shared.ball.Anchored = true
    shared.ball.ball.Part0 = game.Players.LocalPlayer.Character.PrimaryPart
    shared.ball.Anchored = false
    shared.ball.Transparency = 1
end)

    
-- KING --
KingSec = King:CreateSection("The King Of The Field")

Chop = King:CreateButton({
    Name = "Chop Dribble",
  
        Callback = function()

        v0.play(game:GetService("ReplicatedStorage").Resources.barou.kingschop, game.Players.LocalPlayer.Character.PrimaryPart)
       
game.Players.LocalPlayer:SetAttribute("style","barou")
            anim = Instance.new("Animation")
            anim.AnimationId = "rbxassetid://108343574100752"
            
            huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
            huh:Play()
            
            shared.ball.Transparency = 0
            spawn(function()
            wait(huh.Length)
          
            shared.ball.Transparency = 1
            end)
           fireEvent(packetType, "chopdribble", flag, {game.Players.LocalPlayer.Character})
            
        end,
})
ChopKeybind = King:CreateKeybind({
    Name = "Chop Dribble",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.barou.kingschop, game.Players.LocalPlayer.Character.PrimaryPart)
        game.Players.LocalPlayer:SetAttribute("style", "barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://108343574100752"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "chopdribble", flag, {game.Players.LocalPlayer.Character})
     end,
})
LongShot = King:CreateButton({
    Name = "Long Shot",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.barou["kingshot windup (2)"], game.Players.LocalPlayer.Character.PrimaryPart)
       
game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://98869531447623"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
wait(0.37)
v0.play(game:GetService("ReplicatedStorage").Resources.barou["kingshot hitted (2)"], game.Players.LocalPlayer.Character.PrimaryPart)
       

        end)
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "baroushot", flag, {game.Players.LocalPlayer.Character})
            
    end,
})


LongShotKeybind = King:CreateKeybind({
    Name = "Long Shot",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        spawn(function()
        v0.play(game:GetService("ReplicatedStorage").Resources.barou["kingshot windup (2)"], game.Players.LocalPlayer.Character.PrimaryPart)
        end)
game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://98869531447623"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
wait(0.37)
v0.play(game:GetService("ReplicatedStorage").Resources.barou["kingshot hitted (2)"], game.Players.LocalPlayer.Character.PrimaryPart)
       

        end)
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "baroushot", flag, {game.Players.LocalPlayer.Character})
            
    end,
})
KingPath = King:CreateButton({
    Name = "King's Path",
  
        Callback = function()
            spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.barou["kings dribble (1)"], game.Players.LocalPlayer.Character.PrimaryPart)
            end)
game.Players.LocalPlayer:SetAttribute("style","barou")
            anim = Instance.new("Animation")
            anim.AnimationId = "rbxassetid://73560885704292"
            
            huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
            huh:Play()
            
            shared.ball.Transparency = 0
            spawn(function()
            wait(huh.Length)
          
            shared.ball.Transparency = 1
            end)
           fireEvent(packetType, "kingangleDribble", flag, {game.Players.LocalPlayer.Character})
            
        end,
})
KingPathKeybind = King:CreateKeybind({
    Name = "King's Path",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
                   spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.barou["kings dribble (1)"], game.Players.LocalPlayer.Character.PrimaryPart)
            end)
            
               game.Players.LocalPlayer:SetAttribute("style","barou")
            anim = Instance.new("Animation")
            anim.AnimationId = "rbxassetid://73560885704292"
            
            huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
            huh:Play()
            
            shared.ball.Transparency = 0
            spawn(function()
            wait(huh.Length)
          
            shared.ball.Transparency = 1
            end)
           fireEvent(packetType, "kingangleDribble", flag, {game.Players.LocalPlayer.Character})
    end,
})
AwakeningBtn = King:CreateButton({
    Name = "Awakening",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://72914677331981"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.barou.barouTheme,false,require(game.ReplicatedStorage.wiki.styles).barou.color})
            end
       fireEvent(packetType, "barouAwk", flag, {game.Players.LocalPlayer.Character})
            
    end,
})
AwakeningKeybind = King:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
    
        game.Players.LocalPlayer:SetAttribute("style", "barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://72914677331981"
        
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
            if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.barou.barouTheme,false,require(game.ReplicatedStorage.wiki.styles).barou.color})
            end
       fireEvent(packetType, "barouAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
OffTheBallAwakeningBtn = King:CreateButton({
    Name = "Off the Ball Awakening",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://93020650965860"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        asset = game:GetObjects("rbxassetid://71702700707770")[1]
        asset.Parent = workspace

        asset.PrimaryPart.Anchored = true

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://91285193085439"
        track2 = asset.Humanoid:LoadAnimation(anim2)
        track2:Play()

        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()    
        end)
         if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.barou.barouTheme,false,require(game.ReplicatedStorage.wiki.styles).barou.color})
            end
       fireEvent(packetType, "barouAwkwithoutball", flag, {game.Players.LocalPlayer.Character})
         
    end,
})
OffTheBallAwakeningKeybind = King:CreateKeybind({
    Name = "Off the Ball Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
      
game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://93020650965860"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        asset = game:GetObjects("rbxassetid://71702700707770")[1]
        asset.Parent = workspace

        asset.PrimaryPart.Anchored = true

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://91285193085439"
        track2 = asset.Humanoid:LoadAnimation(anim2)
        track2:Play()

        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()    
        end)
          if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.barou.barouTheme,false,require(game.ReplicatedStorage.wiki.styles).barou.color})
            end
       fireEvent(packetType, "barouAwkwithoutball", flag, {game.Players.LocalPlayer.Character})
        end,
})


SecretAwakeningBtn = King:CreateButton({
    Name = "Secret Awakening",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://111827801226491"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.barou.barouTheme,false,require(game.ReplicatedStorage.wiki.styles).barou.color})
            end
       fireEvent(packetType, "baroukyun", flag, {game.Players.LocalPlayer.Character})
          
    end,
})
SecretAwakeningKeybind = King:CreateKeybind({
    Name = "Secret Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        
        game.Players.LocalPlayer:SetAttribute("style", "barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://111827801226491"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.barou.barouTheme,false,require(game.ReplicatedStorage.wiki.styles).barou.color})
            end
               fireEvent(packetType, "baroukyun", flag, {game.Players.LocalPlayer.Character})
         
    end,
})
DevourRunBtn = King:CreateButton({
    Name = "DEVOUR(Run).",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://117921992582675"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()

        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            
            shared.ball.Transparency = 1
        end)
        
               fireEvent(packetType, "barourun", flag, {game.Players.LocalPlayer.Character})
         
    end,
})
DevourRunKeybind = King:CreateKeybind({
    Name = "DEVOUR(Run).",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://117921992582675"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
        
              fireEvent(packetType, "barourun", flag, {game.Players.LocalPlayer.Character})
         
    end,
})
DevourHitBtn = King:CreateButton({
    Name = "DEVOUR(Hit).",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132526511660444"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()

        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length - 6.5)
            huh:Stop()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
              fireEvent(packetType, "u20KickBarou", flag, {game.Players.LocalPlayer.Character,false})
         
    end,
})
DevourHitKeybind = King:CreateKeybind({
    Name = "DEVOUR(Hit).",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132526511660444"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length - 6.5)
            huh:Stop()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
       fireEvent(packetType, "u20KickBarou", flag, {game.Players.LocalPlayer.Character,false})
    end,
})
DevourHitBtn = King:CreateButton({
    Name = "DEVOUR(AUTO GOAL VARIANT).",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132526511660444"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()

        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            huh:Stop()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "u20KickBarou", flag, {game.Players.LocalPlayer.Character,true})
    end,
})
DevourHitKeybind = King:CreateKeybind({
    Name = "DEVOUR(AUTO GOAL VARIANT).",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132526511660444"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            huh:Stop()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "u20KickBarou", flag, {game.Players.LocalPlayer.Character,true})
    end,
})
PredatorEyeBtn = King:CreateButton({
    Name = "Predator Eye",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://114192914971853"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
               fireEvent(packetType, "BarouSteal", flag, {game.Players.LocalPlayer.Character})
    end,
})
PredatorEyeKeybind = King:CreateKeybind({
    Name = "Predator Eye",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "barou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://114192914971853"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "BarouSteal", flag, {game.Players.LocalPlayer.Character})
    end,
})
-- ISAGI --
BaseDirectShotBtn = Isagi:CreateButton({
    Name = "Direct Shot",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://131229402549770"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
       spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.isagi["direct shot"], game.Players.LocalPlayer.Character.PrimaryPart)
        end)    
        spawn(function()
            wait(0.05)
            wait(0.45)

            v0.play(game:GetService("ReplicatedStorage").Resources.isagi["direct shot shot"], game.Players.LocalPlayer.Character.PrimaryPart)
        
            
            fireEvent(packetType, "cameraShake", flag, {1000, 2, 10})
           fireEvent(packetType, "bigshockwave", flag, {game.Players.LocalPlayer.Character.PrimaryPart})
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
       
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Direct Shot",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
 game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://131229402549770"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
       spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.isagi["direct shot"], game.Players.LocalPlayer.Character.PrimaryPart)
        end)    
        spawn(function()
            wait(0.05)
            wait(0.45)

            v0.play(game:GetService("ReplicatedStorage").Resources.isagi["direct shot shot"], game.Players.LocalPlayer.Character.PrimaryPart)
        
            
            fireEvent(packetType, "cameraShake", flag, {1000, 2, 10})
           fireEvent(packetType, "bigshockwave", flag, {game.Players.LocalPlayer.Character.PrimaryPart})
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
    end,
})
NaruhayaBtn = Isagi:CreateButton({
    Name = "Naruhaya Footwork",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://82240286756891"
        spawn(function()
        v0.play(game:GetService("ReplicatedStorage").Resources.isagi["Naruhaya Footwork"], game.Players.LocalPlayer.Character.PrimaryPart)
        end)
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            v_u_2414 = game.Players.LocalPlayer.Character.HumanoidRootPart or game.Players.LocalPlayer.Character.PrimaryPart
            v_u_2415 = game.ReplicatedStorage.Resources.isagi
            task.delay(0.2, function()
                -- upvalues: (copy) v_u_2415, (copy) v_u_2414
                v2416 = v_u_2415.Dash:Clone()
                v2416.CFrame = v_u_2414.CFrame
                v2416.Parent = workspace.Effects
            end)
            v2417 = Instance.new("BodyVelocity")
            v2417.Velocity = -v_u_2414.CFrame.LookVector * 50
            v2417.MaxForce = Vector3.new(20000, 0, 20000)
            v2417.Parent = v_u_2414
            game:GetService("Debris"):AddItem(v2417, 0.2)
                _ = workspace.CurrentCamera.FieldOfView
        end)
        spawn(function()
       wait(0.2)
       
      fireEvent(packetType, "WeldDash", flag, {game.Players.LocalPlayer.Character})
        end)
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
        
       
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Naruhaya Footwork",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
  game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://82240286756891"
        spawn(function()
        v0.play(game:GetService("ReplicatedStorage").Resources.isagi["Naruhaya Footwork"], game.Players.LocalPlayer.Character.PrimaryPart)
        end)
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            v_u_2414 = game.Players.LocalPlayer.Character.HumanoidRootPart or game.Players.LocalPlayer.Character.PrimaryPart
            v_u_2415 = game.ReplicatedStorage.Resources.isagi
            task.delay(0.2, function()
                -- upvalues: (copy) v_u_2415, (copy) v_u_2414
                v2416 = v_u_2415.Dash:Clone()
                v2416.CFrame = v_u_2414.CFrame
                v2416.Parent = workspace.Effects
                EmitAll(v2416)
            end)
            v2417 = Instance.new("BodyVelocity")
            v2417.Velocity = -v_u_2414.CFrame.LookVector * 50
            v2417.MaxForce = Vector3.new(20000, 0, 20000)
            v2417.Parent = v_u_2414
            game:GetService("Debris"):AddItem(v2417, 0.2)
                _ = workspace.CurrentCamera.FieldOfView
        end)
        spawn(function()
       wait(0.2)
       
      fireEvent(packetType, "WeldDash", flag, {game.Players.LocalPlayer.Character})
        end)
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
    end,
})
OldAwakeningBtn = Isagi:CreateButton({
    Name = "Old Awakening",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://136837676477730"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.isagi.theme,false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "isagiawaken", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Old Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

       
        game.Players.LocalPlayer:SetAttribute("style","isagi")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://136837676477730"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
                shared.ball.Transparency = 0
                
                spawn(function()
                    wait(huh.Length)
                    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
                    shared.ball.Transparency = 1
                end)
                 if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.isagi.theme,false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
                fireEvent(packetType, "isagiawaken", flag, {game.Players.LocalPlayer.Character})
    end,
})
AwakeningBtn = Isagi:CreateButton({
    Name = "Awakening",
    
    Callback = function()
      

        game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://107639724047550"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
          if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.isagi.theme,false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "NewFlow", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
       

        game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://107639724047550"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.isagi.theme,false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
         fireEvent(packetType, "NewFlow", flag, {game.Players.LocalPlayer.Character})
    end,
})
OvertimeAwakeningBtn = Isagi:CreateButton({
    Name = "Overtime Awakening",
    
    Callback = function()
        

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://99313800756907"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.isagi["isagi themeover"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "overtimeisagi", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Overtime Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        
        game.Players.LocalPlayer:SetAttribute("style","isagi")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://99313800756907"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
                shared.ball.Transparency = 0
                
                spawn(function()
                    wait(huh.Length)
                    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
                    shared.ball.Transparency = 1
                end)
                if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.isagi["isagi themeover"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
              fireEvent(packetType, "overtimeisagi", flag, {game.Players.LocalPlayer.Character})
    end,
})
DirectShotBtn = Isagi:CreateButton({
    Name = "MY DIRECT SHOT(OLD)!",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
         local oldassets = game:GetObjects("rbxassetid://135158585917335")[1]
  oldassets.Parent = game.ReplicatedStorage.Resources
  oldassets.Name = "OldIsagi"
  anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://76713915786056"
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    oldassets:Destroy()
    shared.ball.Transparency = 1
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    end)
  local v969 = game.Players.LocalPlayer.Character.HumanoidRootPart or game.Players.LocalPlayer.Character.PrimaryPart;
    local _ = game.Players.LocalPlayer.Character.Torso;
    local l_Players_0 = game:GetService("Players");
local l_ReplicatedStorage_0 = game:GetService("ReplicatedStorage");
local _ = game:GetService("ServerStorage");
local l_RunService_0 = game:GetService("RunService");
local _ = game:GetService("UserInputService");
local l_TweenService_0 = game:GetService("TweenService");
local l_Debris_0 = game:GetService("Debris");
local _ = game:GetService("CollectionService");
local l_Lighting_0 = game:GetService("Lighting");
local l_SoundService_0 = game:GetService("SoundService");
local _ = game:GetService("TextService");
local l_ContentProvider_0 = game:GetService("ContentProvider");
local v12 = require(game.ReplicatedStorage.client.replication);
local l_CurrentCamera_0 = workspace.CurrentCamera;
local l_LocalPlayer_0 = l_Players_0.LocalPlayer;
local l_PlayerGui_0 = l_LocalPlayer_0.PlayerGui;
local l_l_LocalPlayer_0_Mouse_0 = l_LocalPlayer_0:GetMouse();
local l_Color_0 = l_Lighting_0.Atmosphere.Color;
local l_Density_0 = l_Lighting_0.Atmosphere.Density;
local l_Brightness_0 = l_Lighting_0.Brightness;
local l_ClockTime_0 = l_Lighting_0.ClockTime;
local v21 = require(game.ReplicatedStorage.client.replication.mainreplication.CameraShaker);
local _ = require(game.ReplicatedStorage.client.replication.BezierCurve);
local v23 = require(l_ReplicatedStorage_0.util.raycast);
local v24 = require(l_ReplicatedStorage_0.util.animationUtil);
local v25 = require(l_ReplicatedStorage_0.util.soundUtil);
local _ = require(l_ReplicatedStorage_0.util.actionUtil);
local v27 = require(game.ReplicatedStorage.client.replication.TekrinnDialogue);
local v28 = require(game.ReplicatedStorage.client.replication.mainreplication);
local v29 = require(game.ReplicatedStorage.client.replication.Invisible);
local v30 = require(l_ReplicatedStorage_0.Welder);
    v12.sceneEnabled(true);
    task.delay(0.15, function() --[[ Line: 4744 ]]
        -- upvalues: v27 (ref), game.Players.LocalPlayer.Character (copy)
        v27.Speak(game.Players.LocalPlayer.Character, {
            {
                Text = "I want to...", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(8, 0, 255)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = false, 
                Italic = false, 
                Shake = {
                    Enabled = true, 
                    Intensity = 2, 
                    Lifetime = 1.5
                }, 
                TypeSpeed = 0.03
            }
        }, 1.5);
    end);
    task.delay(1.333, function() --[[ Line: 4770 ]]
        -- upvalues: v27 (ref), game.Players.LocalPlayer.Character (copy)
        v27.Speak(game.Players.LocalPlayer.Character, {
            {
                Text = "I want to win with my goal!", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 4, 255))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = true, 
                Italic = true, 
                Shake = {
                    Enabled = true, 
                    Intensity = 4, 
                    Lifetime = 2
                }, 
                TypeSpeed = 0.03
            }
        }, 2);
    end);
    task.delay(4.117, function() --[[ Line: 4796 ]]
        -- upvalues: v27 (ref), game.Players.LocalPlayer.Character (copy)
        v27.Speak(game.Players.LocalPlayer.Character, {
            {
                Text = "MY DIRECT SHOT!", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 4, 255))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = true, 
                Italic = true, 
                Shake = {
                    Enabled = true, 
                    Intensity = 5, 
                    Lifetime = 2
                }, 
                TypeSpeed = 0.03
            }
        }, 2);
    end);
    local v971 = l_ReplicatedStorage_0.Resources.DepthOfField:Clone();
    v971.Parent = l_Lighting_0;
    v971.FarIntensity = 0;
    l_TweenService_0:Create(v971, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        FarIntensity = 1
    }):Play();
    local Sound = Instance.new("Sound",game.ReplicatedStorage.Resources.OldIsagi)
    Sound.Name = "DIRECTA SHOOTOTA"
    Sound.Volume = 3
    Sound.SoundId = "rbxassetid://83486127397130"
    v25:play(l_ReplicatedStorage_0.Resources.OldIsagi["DIRECTA SHOOTOTA"], l_SoundService_0);
    v12.cutscene(v969, CFrame.new((Vector3.new(0, 0, 0, 0))), 5.5, l_ReplicatedStorage_0.Resources.OldIsagi.uFOV, true);
    local v972 = l_ReplicatedStorage_0.Resources.OldIsagi.JJ:Clone();
    v972.JJRootPart.JJRootPart.Part0 = v969;
    v972.Parent = v969;
    task.wait(0.15);
    local v973 = l_ReplicatedStorage_0.Resources.OldIsagi.step:Clone();
    v973.CFrame = v969.CFrame * CFrame.new(0.5, -2.6, 0.3);
    v973.Parent = workspace.Effects;
    for _, v975 in ipairs(v973:GetDescendants()) do
        if v975:IsA("ParticleEmitter") then
            v975:Emit(v975:GetAttribute("EmitCount"));
        end;
    end;
    task.delay(2, v973.Destroy, v973);
    task.wait(0.3);
    v12.bright(0.3, 1.5);
    local v976 = l_ReplicatedStorage_0.Resources.OldIsagi.popup:Clone();
    v976.CFrame = v969.CFrame * CFrame.new(0.5, -3, 0.3);
    v976.Parent = workspace.Effects;
    for _, v978 in ipairs(v976:GetDescendants()) do
        if v978:IsA("ParticleEmitter") then
            v978:Emit(v978:GetAttribute("EmitCount"));
        end;
    end;
    task.delay(2, v976.Destroy, v976);
    task.wait(0.4);
    local v979 = l_ReplicatedStorage_0.Resources.OldIsagi.PE:Clone();
    v979:PivotTo(v969.CFrame * CFrame.new(0.5, -3, 0.3));
    v979.Parent = workspace.Effects;
    for _, v981 in ipairs(v979.PE:GetDescendants()) do
        if v981:IsA("ParticleEmitter") then
            v981.Enabled = true;
        end;
    end;
    task.delay(2, v979.Destroy, v979);
    local v982 = l_ReplicatedStorage_0.Resources.OldIsagi.PE2:Clone();
    v982.CFrame = v969.CFrame * CFrame.new(0.5, -3, 0.3);
    v982.Parent = workspace.Effects;
    task.delay(1, function() --[[ Line: 4876 ]]
        -- upvalues: l_ReplicatedStorage_0 (ref)
        local v983 = l_ReplicatedStorage_0.Resources.OldIsagi.bg:Clone();
        v983:PivotTo(workspace.CurrentCamera.CFrame * CFrame.new(0, 15, -15));
        v983.Parent = workspace.Effects;
        task.delay(1, v983.Destroy, v983);
    end);
    task.wait(2);
    for _, v985 in ipairs(v982:GetDescendants()) do
        if v985:IsA("ParticleEmitter") then
            v985.Enabled = false;
        end;
    end;
    task.delay(2, v982.Destroy, v982);
    l_TweenService_0:Create(l_Lighting_0.Atmosphere, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        Density = 0.929, 
        Color = Color3.fromRGB(0, 0, 0), 
        Haze = 4.55
    }):Play();
    local v986 = l_ReplicatedStorage_0.Resources.OldIsagi.line:Clone();
    v986.CFrame = CFrame.new(v969.Position) * CFrame.new(0, -0.7, 0);
    v986.Parent = workspace.Effects;
    task.delay(0.3, v986.Destroy, v986);
    for _, v988 in ipairs(v972:GetDescendants()) do
        if v988:IsA("BasePart") then
            l_ReplicatedStorage_0.Resources.OldIsagi.PointLight:Clone().Parent = v988;
            v988.Material = Enum.Material.Neon;
            l_TweenService_0:Create(v988, TweenInfo.new(0.15), {
                Color = Color3.fromRGB(0, 145, 255)
            }):Play();
        end;
    end;
    task.wait(1.8);
    l_TweenService_0:Create(l_Lighting_0.Atmosphere, TweenInfo.new(0.3), {
        Density = l_Density_0, 
        Color = l_Color_0
    }):Play();
    v12.Emit(v969, l_ReplicatedStorage_0.Resources.OldIsagi.im1, 3, CFrame.new(0.95, -0.15, -3));
    v12.bright(0.3, 1.5);
    task.wait(0.9);
    v971:Destroy();
    v972:Destroy();
    v12.sceneEnabled(false);
    v12.bigshockwave(v969);
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "MY DIRECT SHOT(OLD)!",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","isagi")
         local oldassets = game:GetObjects("rbxassetid://135158585917335")[1]
  oldassets.Parent = game.ReplicatedStorage.Resources
  oldassets.Name = "OldIsagi"
  anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://76713915786056"
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    oldassets:Destroy()
    shared.ball.Transparency = 1
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    end)
  local v969 = game.Players.LocalPlayer.Character.HumanoidRootPart or game.Players.LocalPlayer.Character.PrimaryPart;
    local _ = game.Players.LocalPlayer.Character.Torso;
    local l_Players_0 = game:GetService("Players");
local l_ReplicatedStorage_0 = game:GetService("ReplicatedStorage");
local _ = game:GetService("ServerStorage");
local l_RunService_0 = game:GetService("RunService");
local _ = game:GetService("UserInputService");
local l_TweenService_0 = game:GetService("TweenService");
local l_Debris_0 = game:GetService("Debris");
local _ = game:GetService("CollectionService");
local l_Lighting_0 = game:GetService("Lighting");
local l_SoundService_0 = game:GetService("SoundService");
local _ = game:GetService("TextService");
local l_ContentProvider_0 = game:GetService("ContentProvider");
local v12 = require(game.ReplicatedStorage.client.replication);
local l_CurrentCamera_0 = workspace.CurrentCamera;
local l_LocalPlayer_0 = l_Players_0.LocalPlayer;
local l_PlayerGui_0 = l_LocalPlayer_0.PlayerGui;
local l_l_LocalPlayer_0_Mouse_0 = l_LocalPlayer_0:GetMouse();
local l_Color_0 = l_Lighting_0.Atmosphere.Color;
local l_Density_0 = l_Lighting_0.Atmosphere.Density;
local l_Brightness_0 = l_Lighting_0.Brightness;
local l_ClockTime_0 = l_Lighting_0.ClockTime;
local v21 = require(game.ReplicatedStorage.client.replication.mainreplication.CameraShaker);
local _ = require(game.ReplicatedStorage.client.replication.BezierCurve);
local v23 = require(l_ReplicatedStorage_0.util.raycast);
local v24 = require(l_ReplicatedStorage_0.util.animationUtil);
local v25 = require(l_ReplicatedStorage_0.util.soundUtil);
local _ = require(l_ReplicatedStorage_0.util.actionUtil);
local v27 = require(game.ReplicatedStorage.client.replication.TekrinnDialogue);
local v28 = require(game.ReplicatedStorage.client.replication.mainreplication);
local v29 = require(game.ReplicatedStorage.client.replication.Invisible);
local v30 = require(l_ReplicatedStorage_0.Welder);
    v12.sceneEnabled(true);
    task.delay(0.15, function() --[[ Line: 4744 ]]
        -- upvalues: v27 (ref), game.Players.LocalPlayer.Character (copy)
        v27.Speak(game.Players.LocalPlayer.Character, {
            {
                Text = "I want to...", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(8, 0, 255)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = false, 
                Italic = false, 
                Shake = {
                    Enabled = true, 
                    Intensity = 2, 
                    Lifetime = 1.5
                }, 
                TypeSpeed = 0.03
            }
        }, 1.5);
    end);
    task.delay(1.333, function() --[[ Line: 4770 ]]
        -- upvalues: v27 (ref), game.Players.LocalPlayer.Character (copy)
        v27.Speak(game.Players.LocalPlayer.Character, {
            {
                Text = "I want to win with my goal!", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 4, 255))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = true, 
                Italic = true, 
                Shake = {
                    Enabled = true, 
                    Intensity = 4, 
                    Lifetime = 2
                }, 
                TypeSpeed = 0.03
            }
        }, 2);
    end);
    task.delay(4.117, function() --[[ Line: 4796 ]]
        -- upvalues: v27 (ref), game.Players.LocalPlayer.Character (copy)
        v27.Speak(game.Players.LocalPlayer.Character, {
            {
                Text = "MY DIRECT SHOT!", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 4, 255))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = true, 
                Italic = true, 
                Shake = {
                    Enabled = true, 
                    Intensity = 5, 
                    Lifetime = 2
                }, 
                TypeSpeed = 0.03
            }
        }, 2);
    end);
    local v971 = l_ReplicatedStorage_0.Resources.DepthOfField:Clone();
    v971.Parent = l_Lighting_0;
    v971.FarIntensity = 0;
    l_TweenService_0:Create(v971, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        FarIntensity = 1
    }):Play();
    local Sound = Instance.new("Sound",game.ReplicatedStorage.Resources.OldIsagi)
    Sound.Name = "DIRECTA SHOOTOTA"
    Sound.Volume = 3
    Sound.SoundId = "rbxassetid://83486127397130"
    v25:play(l_ReplicatedStorage_0.Resources.OldIsagi["DIRECTA SHOOTOTA"], l_SoundService_0);
    v12.cutscene(v969, CFrame.new((Vector3.new(0, 0, 0, 0))), 5.5, l_ReplicatedStorage_0.Resources.OldIsagi.uFOV, true);
    local v972 = l_ReplicatedStorage_0.Resources.OldIsagi.JJ:Clone();
    v972.JJRootPart.JJRootPart.Part0 = v969;
    v972.Parent = v969;
    task.wait(0.15);
    local v973 = l_ReplicatedStorage_0.Resources.OldIsagi.step:Clone();
    v973.CFrame = v969.CFrame * CFrame.new(0.5, -2.6, 0.3);
    v973.Parent = workspace.Effects;
    for _, v975 in ipairs(v973:GetDescendants()) do
        if v975:IsA("ParticleEmitter") then
            v975:Emit(v975:GetAttribute("EmitCount"));
        end;
    end;
    task.delay(2, v973.Destroy, v973);
    task.wait(0.3);
    v12.bright(0.3, 1.5);
    local v976 = l_ReplicatedStorage_0.Resources.OldIsagi.popup:Clone();
    v976.CFrame = v969.CFrame * CFrame.new(0.5, -3, 0.3);
    v976.Parent = workspace.Effects;
    for _, v978 in ipairs(v976:GetDescendants()) do
        if v978:IsA("ParticleEmitter") then
            v978:Emit(v978:GetAttribute("EmitCount"));
        end;
    end;
    task.delay(2, v976.Destroy, v976);
    task.wait(0.4);
    local v979 = l_ReplicatedStorage_0.Resources.OldIsagi.PE:Clone();
    v979:PivotTo(v969.CFrame * CFrame.new(0.5, -3, 0.3));
    v979.Parent = workspace.Effects;
    for _, v981 in ipairs(v979.PE:GetDescendants()) do
        if v981:IsA("ParticleEmitter") then
            v981.Enabled = true;
        end;
    end;
    task.delay(2, v979.Destroy, v979);
    local v982 = l_ReplicatedStorage_0.Resources.OldIsagi.PE2:Clone();
    v982.CFrame = v969.CFrame * CFrame.new(0.5, -3, 0.3);
    v982.Parent = workspace.Effects;
    task.delay(1, function() --[[ Line: 4876 ]]
        -- upvalues: l_ReplicatedStorage_0 (ref)
        local v983 = l_ReplicatedStorage_0.Resources.OldIsagi.bg:Clone();
        v983:PivotTo(workspace.CurrentCamera.CFrame * CFrame.new(0, 15, -15));
        v983.Parent = workspace.Effects;
        task.delay(1, v983.Destroy, v983);
    end);
    task.wait(2);
    for _, v985 in ipairs(v982:GetDescendants()) do
        if v985:IsA("ParticleEmitter") then
            v985.Enabled = false;
        end;
    end;
    task.delay(2, v982.Destroy, v982);
    l_TweenService_0:Create(l_Lighting_0.Atmosphere, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        Density = 0.929, 
        Color = Color3.fromRGB(0, 0, 0), 
        Haze = 4.55
    }):Play();
    local v986 = l_ReplicatedStorage_0.Resources.OldIsagi.line:Clone();
    v986.CFrame = CFrame.new(v969.Position) * CFrame.new(0, -0.7, 0);
    v986.Parent = workspace.Effects;
    task.delay(0.3, v986.Destroy, v986);
    for _, v988 in ipairs(v972:GetDescendants()) do
        if v988:IsA("BasePart") then
            l_ReplicatedStorage_0.Resources.OldIsagi.PointLight:Clone().Parent = v988;
            v988.Material = Enum.Material.Neon;
            l_TweenService_0:Create(v988, TweenInfo.new(0.15), {
                Color = Color3.fromRGB(0, 145, 255)
            }):Play();
        end;
    end;
    task.wait(1.8);
    l_TweenService_0:Create(l_Lighting_0.Atmosphere, TweenInfo.new(0.3), {
        Density = l_Density_0, 
        Color = l_Color_0
    }):Play();
    v12.Emit(v969, l_ReplicatedStorage_0.Resources.OldIsagi.im1, 3, CFrame.new(0.95, -0.15, -3));
    v12.bright(0.3, 1.5);
    task.wait(0.9);
    v971:Destroy();
    v972:Destroy();
    v12.sceneEnabled(false);
    v12.bigshockwave(v969);
    end,
})
DirectShotBtn = Isagi:CreateButton({
    Name = "MY DIRECT SHOT",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://75765638194085"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
       fireEvent(packetType, "directshotUlt", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "MY DIRECT SHOT!",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://75765638194085"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "directshotUlt", flag, {game.Players.LocalPlayer.Character})
    end,
})
U20DirectShotBtn = Isagi:CreateButton({
    Name = "U20 MY DIRECT SHOT",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://80038322769571"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "u20Directshot", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "U20 MY DIRECT SHOT!",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","isagi")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://80038322769571"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
                shared.ball.Transparency = 0
                
                spawn(function()
                    wait(huh.Length)
                    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
                    shared.ball.Transparency = 1
                end)
                
               fireEvent(packetType, "u20Directshot", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiBackHeelBtn = Isagi:CreateButton({
    Name = "Reverse Back-Heel Shot",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132723376669504"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
      
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
            shared.ball.Transparency = 1
        end)
        
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://128203244631054"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()

        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(-4,0,0)
        
       fireEvent(packetType, "backheelshotIsagi", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Reverse Back-Heel Shot",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","isagi")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://132723376669504"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
                shared.ball.Transparency = 0
                asset = game:GetObjects("rbxassetid://130755098980898")[1]
              
                spawn(function()
                    wait(huh.Length)
                    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
                    asset:Destroy()
                    shared.ball.Transparency = 1
                end)
                
                asset.Parent = workspace
                asset.PrimaryPart.Anchored = true
                
                anim2 = Instance.new("Animation")
                anim2.AnimationId = "rbxassetid://128203244631054"
                huh2 = asset.Humanoid:LoadAnimation(anim2)
                huh2:Play()
        
                asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(-4,0,0)
                
                fireEvent(packetType, "backheelshotIsagi", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiBackHeelBtn = Isagi:CreateButton({
    Name = "Isagi X Bachira Chem",
    
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://100843688813602"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        asset = game:GetObjects("rbxassetid://138474661361217")[1] 
              asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://103784067087184"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()

        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(6,0,0) * CFrame.Angles(0, math.rad(90), 0)
 asset.Name = "Bachira"
        local bonguy = Instance.new("Player",game.Players)
        bonguy.Name = "Bachira"
        bonguy.Character = asset
        bonguy:SetAttribute("style","bachira")
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
            shared.ball.Transparency = 1
            bonguy:Destroy()
        end)
        

        fireEvent(packetType, "bonIsagiReaction", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Isagi X Bachira Chem",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
       
game.Players.LocalPlayer:SetAttribute("style","isagi")
anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://100843688813602"

huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
shared.ball.Transparency = 0
asset = game:GetObjects("rbxassetid://138474661361217")[1]
      asset.Parent = workspace
asset.PrimaryPart.Anchored = true

anim2 = Instance.new("Animation")
anim2.AnimationId = "rbxassetid://103784067087184"
huh2 = asset.Humanoid:LoadAnimation(anim2)
huh2:Play()

asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(6,0,0) * CFrame.Angles(0, math.rad(90), 0)
asset.Name = "Bachira"
local bonguy = Instance.new("Player",game.Players)
bonguy.Name = "Bachira"
bonguy.Character = asset
bonguy:SetAttribute("style","bachira")
spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    asset:Destroy()
    shared.ball.Transparency = 1
    bonguy:Destroy()
end)


fireEvent(packetType, "bonIsagiReaction", flag, {game.Players.LocalPlayer.Character,asset})
 end,
})
TwoGunOldBtn = Isagi:CreateButton({
    Name = "Two Gun Volley(Old)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://75396896506524"
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        
       fireEvent(packetType, "twogun", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Two Gun Volley(Old)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","isagi")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://75396896506524"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                shared.ball.Transparency = 0
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
                
                spawn(function()
                    wait(huh.Length)
                    shared.ball.Transparency = 1
                    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
                end)
                
               fireEvent(packetType, "twogun", flag, {game.Players.LocalPlayer.Character})
    end,
})
TwoGunNewBtn = Isagi:CreateButton({
    Name = "Two Gun Volley(New)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = game:GetService("ReplicatedStorage").Resources.isagi.NEWtwogun
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        
        fireEvent(packetType, "NEWtwogun", flag, {game.Players.LocalPlayer.Character})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "Two Gun Volley(New)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","isagi")
                anim = game:GetService("ReplicatedStorage").Resources.isagi.NEWtwogun
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                shared.ball.Transparency = 0
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
                
                spawn(function()
                    wait(huh.Length)
                    shared.ball.Transparency = 1
                    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
                end)
                
                fireEvent(packetType, "NEWtwogun", flag, {game.Players.LocalPlayer.Character})
    end,
})
MoveItBtn = Isagi:CreateButton({
    Name = "MOVE IT!",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","isagi")
anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://108840645919389"
huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
asset = game:GetObjects("rbxassetid://139709523866224")[1]

spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    asset:Destroy()
end)

asset.Parent = workspace
asset.PrimaryPart.Anchored = true

anim2 = Instance.new("Animation")
anim2.AnimationId = "rbxassetid://104536381117217"
huh2 = asset.Humanoid:LoadAnimation(anim2)
huh2:Play()

asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset

asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)

fireEvent(packetType, "MOVEIT", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
IsagiKeybind = Isagi:CreateKeybind({
    Name = "MOVE IT!",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","isagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://108840645919389"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        asset = game:GetObjects("rbxassetid://139709523866224")[1]
       
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
        end)
        
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://104536381117217"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        
        fireEvent(packetType, "MOVEIT", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
-- AIKU --
AikuSec = Aiku:CreateSection("The Defense/CM Of U-20")

Serpentsway = Aiku:CreateButton({
    Name = "Serpent\'s Sway",
  
        Callback = function()
            spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.aiku.dribbleback, game.Players.LocalPlayer.Character.PrimaryPart)
            end)
game.Players.LocalPlayer:SetAttribute("style","aiku")
            anim = Instance.new("Animation")
            anim.AnimationId = "rbxassetid://71920366343806"
            
            huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
            huh:Play()
         spawn(function()
        wait(0.6)
        v0.play(game:GetService("ReplicatedStorage").Resources.aiku.dash, game.Players.LocalPlayer.Character.PrimaryPart)
          
         end)
            shared.ball.Transparency = 0
            spawn(function()
            wait(huh.Length)
           
        
            shared.ball.Transparency = 1
            end)
        
        
           fireEvent(packetType, "serpentsway", flag, {game.Players.LocalPlayer.Character})
        end,
})
AikuKeybind = Aiku:CreateKeybind({
    Name = "Serpent\'s Sway",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
         spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.aiku.dribbleback, game.Players.LocalPlayer.Character.PrimaryPart)
            end)
game.Players.LocalPlayer:SetAttribute("style","aiku")
            anim = Instance.new("Animation")
            anim.AnimationId = "rbxassetid://71920366343806"
            
            huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
            huh:Play()
         spawn(function()
        wait(0.6)
        v0.play(game:GetService("ReplicatedStorage").Resources.aiku.dash, game.Players.LocalPlayer.Character.PrimaryPart)
          
         end)
            shared.ball.Transparency = 0
            spawn(function()
            wait(huh.Length)
           
        
            shared.ball.Transparency = 1
            end)
        
        
           fireEvent(packetType, "serpentsway", flag, {game.Players.LocalPlayer.Character})         
    end,
})
Reflex = Aiku:CreateButton({
    Name = "Reflex Tackle",
  
        Callback = function()

game.Players.LocalPlayer:SetAttribute("style","aiku")
            anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://133382731392749"
    spawn(function()
    v0.play(game:GetService("ReplicatedStorage").Resources.aiku["windup (2)"], game.Players.LocalPlayer.Character.PrimaryPart)
    end)
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
 shared.ball.Transparency = 0
            spawn(function()
            wait(huh.Length)
shared.ball.Transparency = 1
            end)
        fireEvent(packetType, "reflexTackle", flag, {game.Players.LocalPlayer.Character})
        end,
})
AikuKeybind = Aiku:CreateKeybind({
    Name = "Reflex Tackle",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
game.Players.LocalPlayer:SetAttribute("style","aiku")
            anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://133382731392749"
    spawn(function()
    v0.play(game:GetService("ReplicatedStorage").Resources.aiku["windup (2)"], game.Players.LocalPlayer.Character.PrimaryPart)
    end)
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
 shared.ball.Transparency = 0
            spawn(function()
            wait(huh.Length)
shared.ball.Transparency = 1
            end)
        fireEvent(packetType, "reflexTackle", flag, {game.Players.LocalPlayer.Character})
    end,
})
Venom = Aiku:CreateButton({
    Name = "Venom Trap",
  
        Callback = function()
          
game.Players.LocalPlayer:SetAttribute("style","aiku")
     anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://137417195558518"
    
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false

    shared.ball.Transparency = 1
    end)


   fireEvent(packetType, "aikutrap", flag, {game.Players.LocalPlayer.Character})
  


        end,
})
AikuKeybind = Aiku:CreateKeybind({
    Name = "Venom Trap",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","aiku")
        anim = Instance.new("Animation")
       anim.AnimationId = "rbxassetid://137417195558518"
       
       huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
       huh:Play()
       game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
       shared.ball.Transparency = 0
       spawn(function()
       wait(huh.Length)
       game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
   
       shared.ball.Transparency = 1
       end)
   
   
       fireEvent(packetType, "aikutrap", flag, {game.Players.LocalPlayer.Character})
     
    end,
})
Awk = Aiku:CreateButton({
    Name = "Awakening",
  
        Callback = function()
        

game.Players.LocalPlayer:SetAttribute("style","aiku")
          anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://108691965861763"
    
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    asset = game:GetObjects("rbxassetid://71702700707770")[1]
    
   
    asset.Parent = workspace

    asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
    asset.PrimaryPart.Anchored = true
    anim2 = Instance.new("Animation")
    anim2.AnimationId = "rbxassetid://100652876448307"
    
    huh2 = asset.Humanoid:LoadAnimation(anim2)
    huh2:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    asset:Destroy()
    shared.ball.Transparency = 1
    end)

if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.aiku.aikutheme,false,require(game.ReplicatedStorage.wiki.styles).aiku.color})
            end
   fireEvent(packetType, "aikuAwk", flag, {game.Players.LocalPlayer.Character})
        end,
})


AikuKeybind = Aiku:CreateKeybind({
    Name = "Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        

        game.Players.LocalPlayer:SetAttribute("style","aiku")
        anim = Instance.new("Animation")
  anim.AnimationId = "rbxassetid://108691965861763"
  
  huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
  huh:Play()
  asset = game:GetObjects("rbxassetid://71702700707770")[1]
  
 
  asset.Parent = workspace

  asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
  asset.PrimaryPart.Anchored = true
  anim2 = Instance.new("Animation")
  anim2.AnimationId = "rbxassetid://100652876448307"
  
  huh2 = asset.Humanoid:LoadAnimation(anim2)
  huh2:Play()
  game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
  shared.ball.Transparency = 0
  spawn(function()
  wait(huh.Length)
  game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
  asset:Destroy()
  shared.ball.Transparency = 1
  end)
if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.aiku.aikutheme,false,require(game.ReplicatedStorage.wiki.styles).aiku.color})
            end


   fireEvent(packetType, "aikuAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
Nawk = Aiku:CreateButton({
    Name = "Off The Ball Awakening",
  
        Callback = function()
        

game.Players.LocalPlayer:SetAttribute("style","aiku")
         anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://94636625467053"
    
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false

    shared.ball.Transparency = 1
    end)


    if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.aiku.aikutheme,false,require(game.ReplicatedStorage.wiki.styles).aiku.color})
            end
   fireEvent(packetType, "offtheballAwk", flag, {game.Players.LocalPlayer.Character})
        end,
})

AikuKeybind = Aiku:CreateKeybind({
    Name = "Off The Ball Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        

        game.Players.LocalPlayer:SetAttribute("style","aiku")
        anim = Instance.new("Animation")
   anim.AnimationId = "rbxassetid://94636625467053"
   
   huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
   huh:Play()
   game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
   shared.ball.Transparency = 0
   spawn(function()
   wait(huh.Length)
   game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false

   shared.ball.Transparency = 1
   end)
if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.aiku.aikutheme,false,require(game.ReplicatedStorage.wiki.styles).aiku.color})
            end

   fireEvent(packetType, "offtheballAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
ud = Aiku:CreateButton({
    Name = "Ultimate Defense",
  
        Callback = function()

game.Players.LocalPlayer:SetAttribute("style","aiku")
     anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://119232942790089"
    
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false

    shared.ball.Transparency = 1
    end)


   fireEvent(packetType, "serpentdefense", flag, {game.Players.LocalPlayer.Character})
        end,
})

AikuKeybind = Aiku:CreateKeybind({
    Name = "Ultimate Defense",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","aiku")
        anim = Instance.new("Animation")
       anim.AnimationId = "rbxassetid://119232942790089"
       
       huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
       huh:Play()
       game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
       shared.ball.Transparency = 0
       spawn(function()
       wait(huh.Length)
       game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
   
       shared.ball.Transparency = 1
       end)
   
   
      fireEvent(packetType, "serpentdefense", flag, {game.Players.LocalPlayer.Character})
    end,
})
Former = Aiku:CreateButton({
    Name = "Former Striker",
  
        Callback = function()

game.Players.LocalPlayer:SetAttribute("style","aiku")
              anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://113972073011721"
    
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false

    shared.ball.Transparency = 1
    end)


    fireEvent(packetType, "formerstriker", flag, {game.Players.LocalPlayer.Character})
        end,
})

AikuKeybind = Aiku:CreateKeybind({
    Name = "Former Striker",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","aiku")
        anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://113972073011721"

huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
shared.ball.Transparency = 0
spawn(function()
wait(huh.Length)
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false

shared.ball.Transparency = 1
end)

fireEvent(packetType, "formerstriker", flag, {game.Players.LocalPlayer.Character})
    end,
})
-- NAGI --
NagiSec = Nagi:CreateSection("Sleeping Genius")

FakeVolleyBtn = Nagi:CreateButton({
    Name = "Fake Volley",
    
    Callback = function()
        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi["Fake Volley"], game.Players.LocalPlayer.Character.PrimaryPart)
        end)
          
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://71640109646843"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "fakevolley", flag, {game.Players.LocalPlayer.Character})
    end,
})

NagiKeybind = Nagi:CreateKeybind({
    Name = "Fake Volley",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.nagi["Fake Volley"], game.Players.LocalPlayer.Character.PrimaryPart)
          
        game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://71640109646843"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "fakevolley", flag, {game.Players.LocalPlayer.Character})
    end,
})

ControlWindupBtn = Nagi:CreateButton({
    Name = "Ground Control(Windup)",
    
    Callback = function()
        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi.GroundControlStart, game.Players.LocalPlayer.Character.PrimaryPart)
        end)
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://77370115011368"

        shared.ball.Transparency = 0
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        spawn(function()
        wait(track.Length)
        shared.ball.Transparency = 1
        end)
    
       fireEvent(packetType, "groundcontrolstart", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Ground Control (Windup)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
               spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi.GroundControlStart, game.Players.LocalPlayer.Character.PrimaryPart)
        end)
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://77370115011368"

        shared.ball.Transparency = 0
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        spawn(function()
        wait(track.Length)
        shared.ball.Transparency = 1
        end)
    
       fireEvent(packetType, "groundcontrolstart", flag, {game.Players.LocalPlayer.Character})
                end,
})
ControlWindupBtn = Nagi:CreateButton({
    Name = "Ground Control(Hit)",
    
    Callback = function()

        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi.GroundControlConfirm, game.Players.LocalPlayer.Character.PrimaryPart)
        end)
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://78280952546259"
shared.ball.Transparency = 0
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        spawn(function()
        wait(track.Length)
        shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "groundcontrolconfirm", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Ground Control (Hit)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi.GroundControlConfirm, game.Players.LocalPlayer.Character.PrimaryPart)
        end)
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://78280952546259"
shared.ball.Transparency = 0
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        spawn(function()
        wait(track.Length)
        shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "groundcontrolconfirm", flag, {game.Players.LocalPlayer.Character})
                end,
})
ControlWindupBtn = Nagi:CreateButton({
    Name = "AIR Control(Windup)",
    
    Callback = function()
        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi.jump, game.Players.LocalPlayer.Character.PrimaryPart)
        end)
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://135752742267018"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        fireEvent(packetType, "nagicontrolwindup", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "AIR Control (Windup)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi.jump, game.Players.LocalPlayer.Character.PrimaryPart)
        end)
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://135752742267018"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        fireEvent(packetType, "nagicontrolwindup", flag, {game.Players.LocalPlayer.Character})
    end,
})
ControlHitBtn = Nagi:CreateButton({
    Name = "AIR Control(Hit)",
    
    Callback = function()
        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi["catch ball"], game.Players.LocalPlayer.Character.PrimaryPart)
        end) 
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://76399942012151"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "nagicontrol", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "AIR Control(Hit)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi["catch ball"], game.Players.LocalPlayer.Character.PrimaryPart)
        end) 
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://76399942012151"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "nagicontrol", flag, {game.Players.LocalPlayer.Character})
    end,
})
ControlHitBtn = Nagi:CreateButton({
    Name = "Zero Reset Turn(Some VFX Are Missing)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://130113720883769"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "nagi4", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Zero Reset Turn(Some VFX Are Missing)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://130113720883769"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "nagi4", flag, {game.Players.LocalPlayer.Character})
    end,
})
ControlVariantBtn = Nagi:CreateButton({
    Name = "Control(VARIANT old)",
    
    Callback = function()
        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi.blocked_1, workspace)
        end)
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://72799700810784"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "nagicontrolawk", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Control(VARIANT old)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
    
        spawn(function()
            v0.play(game:GetService("ReplicatedStorage").Resources.nagi.blocked_1, workspace)
        end)
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://72799700810784"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "nagicontrolawk", flag, {game.Players.LocalPlayer.Character})
        end,
})
ControlVariantBtn = Nagi:CreateButton({
    Name = "Control(VARIANT)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://117764120613044"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         fireEvent(packetType, "newcontrolgoal", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Control(VARIANT)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
       
    game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://117764120613044"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         fireEvent(packetType, "newcontrolgoal", flag, {game.Players.LocalPlayer.Character})
    end,
})

HeavyVariantBtn = Nagi:CreateButton({
    Name = "Heavy(Variant)",
    
    Callback = function()
 game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://130372168910538"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
         shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
             shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
         fireEvent(packetType, "roulettevolley", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Heavy(Variant)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
 game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://130372168910538"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
         shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
             shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
         fireEvent(packetType, "roulettevolley", flag, {game.Players.LocalPlayer.Character})
    end,
})
ControlHitBtn = Nagi:CreateButton({
    Name = "Old Awakening",
    
    Callback = function()
        
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132936583641182"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.nagi["nagi theme"],false,require(game.ReplicatedStorage.wiki.styles).nagi.color})
            end

local l_Players_0 = game:GetService("Players");
local l_ReplicatedStorage_0 = game:GetService("ReplicatedStorage");
local _ = game:GetService("ServerStorage");
local l_RunService_0 = game:GetService("RunService");
local _ = game:GetService("UserInputService");
local l_TweenService_0 = game:GetService("TweenService");
local l_Debris_0 = game:GetService("Debris");
local _ = game:GetService("CollectionService");
local l_Lighting_0 = game:GetService("Lighting");
local l_SoundService_0 = game:GetService("SoundService");
local _ = game:GetService("TextService");
local _ = game:GetService("ContentProvider");
local l_CurrentCamera_0 = workspace.CurrentCamera;
local l_LocalPlayer_0 = l_Players_0.LocalPlayer;
local l_PlayerGui_0 = l_LocalPlayer_0.PlayerGui;
local l_l_LocalPlayer_0_Mouse_0 = l_LocalPlayer_0:GetMouse();
local l_Color_0 = l_Lighting_0.Atmosphere.Color;
local l_Density_0 = l_Lighting_0.Atmosphere.Density;
local l_Brightness_0 = l_Lighting_0.Brightness;
local l_ClockTime_0 = l_Lighting_0.ClockTime;
local l_Ambient_0 = l_Lighting_0.Ambient;
local l_Threshold_0 = l_Lighting_0.Bloom.Threshold;
local _ = require(game.ReplicatedStorage.client.replication.BezierCurve);
local v24 = require(l_ReplicatedStorage_0.util.raycast);
local v25 = require(l_ReplicatedStorage_0.util.animationUtil);
local v26 = require(l_ReplicatedStorage_0.util.soundUtil);
local _ = require(l_ReplicatedStorage_0.util.actionUtil);
local v28 = require(game.ReplicatedStorage.client.replication.TekrinnDialogue);
local v29 = require(game.ReplicatedStorage.client.replication.mainreplication);
local v30 = require(game.ReplicatedStorage.client.replication.Invisible);
local v31 = require(game.ReplicatedStorage.client.replication.MeshEmitter);
local _ = require(l_ReplicatedStorage_0.util.EasingFunctions);
local v12 = require(game.ReplicatedStorage.client.replication.mainreplication);
local v1225 = game.Players.LocalPlayer.Character
local v1226 = v1225.HumanoidRootPart or v1225.PrimaryPart;
    local _ = v1225.Torso;
    v12.sceneEnabled(true);
    task.delay(0.633, function() --[[ Line: 6068 ]]
        -- upvalues: v28 (ref), v1225 (copy)
        v28.Speak(v1225, {
            {
                Text = "You can't beat me.", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(201, 206, 255)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = false, 
                Italic = false, 
                Shake = {
                    Enabled = false, 
                    Intensity = 1.3, 
                    Lifetime = 4
                }, 
                TypeSpeed = 0.03
            }
        }, 2.867);
    end);
    task.delay(4.583, function() --[[ Line: 6094 ]]
        -- upvalues: v28 (ref), v1225 (copy)
        v28.Speak(v1225, {
            {
                Text = "Bring it.", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 4))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = true, 
                Italic = true, 
                Shake = {
                    Enabled = true, 
                    Intensity = 3, 
                    Lifetime = 1
                }, 
                TypeSpeed = 0.01
            }
        }, 1);
    end);
    l_Lighting_0.Atmosphere.Density = 0.7;
    l_Lighting_0.Atmosphere.Color = Color3.fromRGB(0, 0, 0);
    l_Lighting_0.Atmosphere.Haze = 4.55;
    local v1228 = l_ReplicatedStorage_0.Resources.darkscreen:Clone();
    v1228.Parent = l_PlayerGui_0;
    local v1229 = l_ReplicatedStorage_0.Resources.nagi.sKULL:Clone();
    v1229.Parent = v1225;
    v1229.sKULL.Part0 = v1226;
    local v1230 = l_ReplicatedStorage_0.Resources.DepthOfField:Clone();
    v1230.Parent = l_Lighting_0;
    v1230.FarIntensity = 0;
    l_TweenService_0:Create(v1230, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        FarIntensity = 1
    }):Play();
    local v1231 = l_ReplicatedStorage_0.Resources.nagi.ColorCorrection2:Clone();
    v1231.Parent = l_Lighting_0;
    v26:play(l_ReplicatedStorage_0.Resources.nagi["nagi awaken"], l_SoundService_0);
    v12.cutscene(v1226, CFrame.new((Vector3.new(0, 0, 0, 0))), 7.083333492279053, l_ReplicatedStorage_0.Resources.nagi["2FOV"]);
    local v1232 = l_ReplicatedStorage_0.Resources.nagi.awafloor:Clone();
    v1232.CFrame = v1226.CFrame * CFrame.new(0, -3, 0);
    v1232.Parent = v1225;
    v12.bright(1, 1.5);
    task.wait(7.083333492279053);
    v12.ultFlash(-1);
    v1228:Destroy();
    v1231:Destroy();
    v1229:Destroy();
    v1232:Destroy();
    l_Lighting_0.Atmosphere.Density = l_Density_0;
    l_Lighting_0.Atmosphere.Color = l_Color_0;
    l_Lighting_0.Atmosphere.Haze = 3;
    v1230:Destroy();
    v12.fov(false, 40);
    v12.fov(true, 70, 2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out);
    v12.sceneEnabled(false);
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Old Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        

game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132936583641182"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.nagi["nagi theme"],false,require(game.ReplicatedStorage.wiki.styles).nagi.color})
            end
local l_Players_0 = game:GetService("Players");
local l_ReplicatedStorage_0 = game:GetService("ReplicatedStorage");
local _ = game:GetService("ServerStorage");
local l_RunService_0 = game:GetService("RunService");
local _ = game:GetService("UserInputService");
local l_TweenService_0 = game:GetService("TweenService");
local l_Debris_0 = game:GetService("Debris");
local _ = game:GetService("CollectionService");
local l_Lighting_0 = game:GetService("Lighting");
local l_SoundService_0 = game:GetService("SoundService");
local _ = game:GetService("TextService");
local _ = game:GetService("ContentProvider");
local l_CurrentCamera_0 = workspace.CurrentCamera;
local l_LocalPlayer_0 = l_Players_0.LocalPlayer;
local l_PlayerGui_0 = l_LocalPlayer_0.PlayerGui;
local l_l_LocalPlayer_0_Mouse_0 = l_LocalPlayer_0:GetMouse();
local l_Color_0 = l_Lighting_0.Atmosphere.Color;
local l_Density_0 = l_Lighting_0.Atmosphere.Density;
local l_Brightness_0 = l_Lighting_0.Brightness;
local l_ClockTime_0 = l_Lighting_0.ClockTime;
local l_Ambient_0 = l_Lighting_0.Ambient;
local l_Threshold_0 = l_Lighting_0.Bloom.Threshold;
local _ = require(game.ReplicatedStorage.client.replication.BezierCurve);
local v24 = require(l_ReplicatedStorage_0.util.raycast);
local v25 = require(l_ReplicatedStorage_0.util.animationUtil);
local v26 = require(l_ReplicatedStorage_0.util.soundUtil);
local _ = require(l_ReplicatedStorage_0.util.actionUtil);
local v28 = require(game.ReplicatedStorage.client.replication.TekrinnDialogue);
local v29 = require(game.ReplicatedStorage.client.replication.mainreplication);
local v30 = require(game.ReplicatedStorage.client.replication.Invisible);
local v31 = require(game.ReplicatedStorage.client.replication.MeshEmitter);
local _ = require(l_ReplicatedStorage_0.util.EasingFunctions);
local v12 = require(game.ReplicatedStorage.client.replication.mainreplication);
local v1225 = game.Players.LocalPlayer.Character
local v1226 = v1225.HumanoidRootPart or v1225.PrimaryPart;
    local _ = v1225.Torso;
    v12.sceneEnabled(true);
    task.delay(0.633, function() --[[ Line: 6068 ]]
        -- upvalues: v28 (ref), v1225 (copy)
        v28.Speak(v1225, {
            {
                Text = "You can't beat me.", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(201, 206, 255)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = false, 
                Italic = false, 
                Shake = {
                    Enabled = false, 
                    Intensity = 1.3, 
                    Lifetime = 4
                }, 
                TypeSpeed = 0.03
            }
        }, 2.867);
    end);
    task.delay(4.583, function() --[[ Line: 6094 ]]
        -- upvalues: v28 (ref), v1225 (copy)
        v28.Speak(v1225, {
            {
                Text = "Bring it.", 
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)), 
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 4))
                }), 
                TextStrokeColor = Color3.new(0, 0, 0), 
                Bold = true, 
                Italic = true, 
                Shake = {
                    Enabled = true, 
                    Intensity = 3, 
                    Lifetime = 1
                }, 
                TypeSpeed = 0.01
            }
        }, 1);
    end);
    l_Lighting_0.Atmosphere.Density = 0.7;
    l_Lighting_0.Atmosphere.Color = Color3.fromRGB(0, 0, 0);
    l_Lighting_0.Atmosphere.Haze = 4.55;
    local v1228 = l_ReplicatedStorage_0.Resources.darkscreen:Clone();
    v1228.Parent = l_PlayerGui_0;
    local v1229 = l_ReplicatedStorage_0.Resources.nagi.sKULL:Clone();
    v1229.Parent = v1225;
    v1229.sKULL.Part0 = v1226;
    local v1230 = l_ReplicatedStorage_0.Resources.DepthOfField:Clone();
    v1230.Parent = l_Lighting_0;
    v1230.FarIntensity = 0;
    l_TweenService_0:Create(v1230, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {
        FarIntensity = 1
    }):Play();
    local v1231 = l_ReplicatedStorage_0.Resources.nagi.ColorCorrection2:Clone();
    v1231.Parent = l_Lighting_0;
    v26:play(l_ReplicatedStorage_0.Resources.nagi["nagi awaken"], l_SoundService_0);
    v12.cutscene(v1226, CFrame.new((Vector3.new(0, 0, 0, 0))), 7.083333492279053, l_ReplicatedStorage_0.Resources.nagi["2FOV"]);
    local v1232 = l_ReplicatedStorage_0.Resources.nagi.awafloor:Clone();
    v1232.CFrame = v1226.CFrame * CFrame.new(0, -3, 0);
    v1232.Parent = v1225;
    v12.bright(1, 1.5);
    task.wait(7.083333492279053);
    v12.ultFlash(-1);
    v1228:Destroy();
    v1231:Destroy();
    v1229:Destroy();
    v1232:Destroy();
    l_Lighting_0.Atmosphere.Density = l_Density_0;
    l_Lighting_0.Atmosphere.Color = l_Color_0;
    l_Lighting_0.Atmosphere.Haze = 3;
    v1230:Destroy();
    v12.fov(false, 40);
    v12.fov(true, 70, 2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out);
    v12.sceneEnabled(false);
    end,
})
AwakeningBtn = Nagi:CreateButton({
    Name = "Awakening",
    
    Callback = function()
     

game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://80140996064733"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
           if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.nagi["nagi theme"],false,require(game.ReplicatedStorage.wiki.styles).nagi.color})
            end
         fireEvent(packetType, "nagiawaken", flag, {game.Players.LocalPlayer.Character})
   
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://80140996064733"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.nagi["nagi theme"],false,require(game.ReplicatedStorage.wiki.styles).nagi.color})
            end
         fireEvent(packetType, "nagiawaken", flag, {game.Players.LocalPlayer.Character})
   
    end,
})
JapanLineBtn = Nagi:CreateButton({
    Name = "Five Stage Volley",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://115297614608177"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
           fireEvent(packetType, "fivestagevolley", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Five Stage Volley",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://115297614608177"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
           fireEvent(packetType, "fivestagevolley", flag, {game.Players.LocalPlayer.Character})

    end,
})

JapanLineBtn = Nagi:CreateButton({
    Name = "Nice to meet you, Japan.",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://82929375261557"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         fireEvent(packetType, "amnagi", flag, {game.Players.LocalPlayer.Character})
    end,
})
NagiKeybind = Nagi:CreateKeybind({
    Name = "Nice to meet you, Japan",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","nagi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://82929375261557"

        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         fireEvent(packetType, "amnagi", flag, {game.Players.LocalPlayer.Character})
    end,
})

-- SHIDOU --
ShidouSec = Shidou:CreateSection("Gayiou!")


FormlessBtn = Shidou:CreateButton({
    Name = "Formless",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://89606491538791"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.shidou.FormlessS, game.Players.LocalPlayer.Character.PrimaryPart)
          
        fireEvent(packetType, "formless", flag, {game.Players.LocalPlayer.Character})
    end,
})
ShidouKeybind = Shidou:CreateKeybind({
    Name = "Formless",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.shidou.FormlessS, game.Players.LocalPlayer.Character.PrimaryPart)
          
        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://89606491538791"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
         fireEvent(packetType, "formless", flag, {game.Players.LocalPlayer.Character})
    end,
})
DraconicRushBtn = Shidou:CreateButton({
    Name = "Draconic Rush",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.shidou.runmov, game.Players.LocalPlayer.Character.PrimaryPart)
          
game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://95359966795185"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        fireEvent(packetType, "shidorun", flag, {game.Players.LocalPlayer.Character})
    end,
})
ShidouKeybind = Shidou:CreateKeybind({
    Name = "Draconic Rush",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.shidou.runmov, game.Players.LocalPlayer.Character.PrimaryPart)
          
        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://95359966795185"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        fireEvent(packetType, "shidorun", flag, {game.Players.LocalPlayer.Character})
    end,
})
DragonBtn = Shidou:CreateButton({
    Name = "Back Heel Shot",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://119133025118742"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        v0.play(game:GetService("ReplicatedStorage").Resources.shidou.heelkickwindup, game.Players.LocalPlayer.Character.PrimaryPart)
          
        shared.ball.Transparency = 0
        spawn(function()
            wait(0.58)
            v0.play(game:GetService("ReplicatedStorage").Resources.shidou.heelkickhitted, game.Players.LocalPlayer.Character.PrimaryPart)
          
        
        fireEvent(packetType, "shidoushockwave", flag, {game.Players.LocalPlayer.Character})   
        end)
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       
    end,
})
ShidouKeybind = Shidou:CreateKeybind({
    Name = "Back Heel Shot",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
     
game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://119133025118742"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        v0.play(game:GetService("ReplicatedStorage").Resources.shidou.heelkickwindup, game.Players.LocalPlayer.Character.PrimaryPart)
          
        shared.ball.Transparency = 0
        spawn(function()
            wait(0.58)
            v0.play(game:GetService("ReplicatedStorage").Resources.shidou.heelkickhitted, game.Players.LocalPlayer.Character.PrimaryPart)
          
        
        fireEvent(packetType, "shidoushockwave", flag, {game.Players.LocalPlayer.Character})   
        end)
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       
    end,
})
DragonBtn = Shidou:CreateButton({
    Name = "Dragon Drive(Formless Variant)",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.shidou.hitted, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://74104155807630"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
    
        fireEvent(packetType, "shidoudragonhit", flag, {game.Players.LocalPlayer.Character})    
    end,
})

ShidouKeybind = Shidou:CreateKeybind({
    Name = "Dragon Drive(Formless Variant)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.shidou.hitted, game.Players.LocalPlayer.Character.PrimaryPart)
  
        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://74104155807630"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "shidoudragonhit", flag, {game.Players.LocalPlayer.Character})    
        end,
})
OldAwakeningBtn = Shidou:CreateButton({
    Name = "Old Awakening",
    
    Callback = function()

       
game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://135493353510967"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)

        if getgenv().UseAwkMusic == true then
 fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.shidou["shidoutheme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
end
        fireEvent(packetType, "shidouawk", flag, {game.Players.LocalPlayer.Character})    
    end,
})

ShidouKeybind = Shidou:CreateKeybind({
    Name = "Old Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://135493353510967"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
 fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.shidou["shidoutheme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
end
        fireEvent(packetType, "shidouawk", flag, {game.Players.LocalPlayer.Character})    
    end,
})
AwakeningBtn = Shidou:CreateButton({
    Name = "Awakening",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://139715031680504"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
 fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.shidou["shidoutheme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
end
       fireEvent(packetType, "NEWshidouawk", flag, {game.Players.LocalPlayer.Character})    
    end,
})

ShidouKeybind = Shidou:CreateKeybind({
    Name = "Awakening",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://139715031680504"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
 fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.shidou["shidoutheme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
end
       fireEvent(packetType, "NEWshidouawk", flag, {game.Players.LocalPlayer.Character})    
    end,
})
BicycleKickBtn = Shidou:CreateButton({
    Name = "Bicycle Kick",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://136907721689927"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "formlessflow", flag, {game.Players.LocalPlayer.Character})    
    end,
})

ShidouKeybind = Shidou:CreateKeybind({
    Name = "Bicycle Kick",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()


        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://136907721689927"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "formlessflow", flag, {game.Players.LocalPlayer.Character})   
    end,
})
UnstoppableBtn = Shidou:CreateButton({
    Name = "Unstoppable",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://122556398286675"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "unstoppableShidou", flag, {game.Players.LocalPlayer.Character})   
        end,
})

ShidouKeybind = Shidou:CreateKeybind({
    Name = "Unstoppable",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://122556398286675"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
       fireEvent(packetType, "unstoppableShidou", flag, {game.Players.LocalPlayer.Character})   
    end,
})
BigBangDriveBtn = Shidou:CreateButton({
    Name = "Big Bang Drive",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132876424584395"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       
       fireEvent(packetType, "bigbangdrive", flag, {game.Players.LocalPlayer.Character})   
       end,
})
ShidouKeybind = Shidou:CreateKeybind({
    Name = "Big Bang Drive",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://132876424584395"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "bigbangdrive", flag, {game.Players.LocalPlayer.Character})   
    end,
})
DragonDriveBtn = Shidou:CreateButton({
    Name = "Dragon Drive",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://92214239049423"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "dragondrive", flag, {game.Players.LocalPlayer.Character})   
    end,
})
ShidouKeybind = Shidou:CreateKeybind({
    Name = "Dragon Drive",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","shidou")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://92214239049423"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "dragondrive", flag, {game.Players.LocalPlayer.Character})  
    end,
})

-- SAE --
SaeSec = Sae:CreateSection("The Japan's Treasure")

-- Perfect Touch(Heel Flick) Button
PerfectTouchTurnButton = Sae:CreateButton({
    Name = "Perfect Touch(Turn)",
    
    Callback = function()
    v0.play(game:GetService("ReplicatedStorage").Resources.sae.saemagicturnthing, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://77926234700416"
        huh = v0.loadAnimation(game.Players.LocalPlayer.Character, game.ReplicatedStorage.Resources.sae.newmagicdribbleR)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "beautifulDestruction", flag, {game.Players.LocalPlayer.Character})  
    end,
})

SaeKeybind = Sae:CreateKeybind({
    Name = "Perfect Touch(Turn)",
        CurrentKeybind = "Minus",
HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.sae.saemagicturnthing, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://77926234700416"
        huh = v0.loadAnimation(game.Players.LocalPlayer.Character, game.ReplicatedStorage.Resources.sae.newmagicdribbleR)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "beautifulDestruction", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
PerfectTouchHeelButton = Sae:CreateButton({
    Name = "Perfect Touch(Heel Flick)",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.sae.saeheelfickthing, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://77926234700416"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "saeheelflick", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
PerfectTouchHeelKeybind = Sae:CreateKeybind({
    Name = "Perfect Touch (Heel Flick)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.sae.saeheelfickthing, game.Players.LocalPlayer.Character.PrimaryPart)
  
        game.Players.LocalPlayer:SetAttribute("style","sae")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://77926234700416"
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                shared.ball.Transparency = 0
                spawn(function()
                    wait(huh.Length)
                    shared.ball.Transparency = 1
                end)
       fireEvent(packetType, "saeheelflick", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
-- Nutmeg Button
NutmegButton = Sae:CreateButton({
    Name = "Nutmeg",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://88690614253524"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "saeskill2", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
NutmegKeybind = Sae:CreateKeybind({
    Name = "Nutmeg",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://88690614253524"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "saeskill2", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
AwakeningButton = Sae:CreateButton({
    Name = "Curve Shot",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.nagi.ballkickwindup, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://76200134398422"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
        wait(0.25)
        v0.play(game:GetService("ReplicatedStorage").Resources.nagi.ballkicked, game.Players.LocalPlayer.Character.PrimaryPart)
  
       fireEvent(packetType, "saepass", flag, {game.Players.LocalPlayer.Character}) 
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
    end,
})
CurveShotKeybind = Sae:CreateKeybind({
    Name = "Curve Shot",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.nagi.ballkickwindup, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://76200134398422"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
        wait(0.25)
        v0.play(game:GetService("ReplicatedStorage").Resources.nagi.ballkicked, game.Players.LocalPlayer.Character.PrimaryPart)
  
       fireEvent(packetType, "saepass", flag, {game.Players.LocalPlayer.Character}) 
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
    end,
})
-- Awakening Button
AwakeningButton = Sae:CreateButton({
    Name = "Awakening",
    
    Callback = function()
 
game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://129819822755077"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)

        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.sae["sae theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "saeAwk", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
AwakeningKeybind = Sae:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style", "sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://129819822755077"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.sae["sae theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "saeAwk", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
Awakening2Button = Sae:CreateButton({
    Name = "Overtime Awakening",
    
    Callback = function()


game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://70656783517196"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.sae["sae one shot match theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "saeAwk2", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
Awakening2Keybind = Sae:CreateKeybind({
    Name = "Overtime Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
 
        game.Players.LocalPlayer:SetAttribute("style", "sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://70656783517196"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.sae["sae one shot match theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "saeAwk2", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
NutmegVariantBtn = Sae:CreateButton({
    Name = "Nutmeg(VARIANT)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://120937034063401"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://71407810699742"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        
       
       fireEvent(packetType, "saeSteal", flag, {game.Players.LocalPlayer.Character,asset})  
    
    end,
})
NutmegVariantKeybind = Sae:CreateKeybind({
    Name = "Nutmeg (VARIANT)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://120937034063401"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://71407810699742"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
       fireEvent(packetType, "saeSteal", flag, {game.Players.LocalPlayer.Character,asset})  
    end,
})
-- Cross Elastico (non-Rin Variant) Button
CrossElasticoNonRinButton = Sae:CreateButton({
    Name = "Cross Elastico(non-Rin Variant)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://123352892512933"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://110998136054295"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
fireEvent(17, "saenutmeg", 1, {game.Players.LocalPlayer.Character, asset})

    end,
})
CrossElasticoNonRinKeybind = Sae:CreateKeybind({
    Name = "Cross Elastico (non-Rin Variant)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://123352892512933"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://110998136054295"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()

fireEvent(17, "saenutmeg", 1, {game.Players.LocalPlayer.Character, asset})
 end,
})
-- Cross Elastico (Rin Variant) Button
CrossElasticoRinButton = Sae:CreateButton({
    Name = "Cross Elastico(Rin Variant)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://88343654464002"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
       
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        rinplr = Instance.new("Player",game:GetService("Players"))
       
        spawn(function()
            wait(huh.Length)
            rinplr:Destroy()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        
        asset.Parent = workspace
        rinplr.Name = "Rin"
        rinplr:SetAttribute("style","rin")
        rinplr.Character = asset
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://85377656722112"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
       fireEvent(packetType, "rvs", flag, {game.Players.LocalPlayer.Character,asset})  
     end,
})
CrossElasticoRinKeybind = Sae:CreateKeybind({
    Name = "Cross Elastico (Rin Variant)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "sae")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://88343654464002"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]

        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        rinplr = Instance.new("Player", game:GetService("Players"))

        spawn(function()
            wait(huh.Length)
            rinplr:Destroy()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)

        asset.Parent = workspace
        rinplr.Name = "Rin"
        rinplr:SetAttribute("style", "rin")
        rinplr.Character = asset
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://85377656722112"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()

       fireEvent(packetType, "rvs", flag, {game.Players.LocalPlayer.Character,asset})  
    end,
})
-- RIN --
RinSec = Rin:CreateSection("The Little Brother Of Genius")

-- Occlusion Break Button
OcclusionBreakButton = Rin:CreateButton({
    Name = "Occlusion Break",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.rin.occlusion, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://116181317759538"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "occlusionBreak", flag, {game.Players.LocalPlayer.Character})  
        end,
})
OcclusionBreakKeybind = Rin:CreateKeybind({
    Name = "Occlusion Break",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.rin.occlusion, game.Players.LocalPlayer.Character.PrimaryPart)
  
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://116181317759538"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "occlusionBreak", flag, {game.Players.LocalPlayer.Character})    
      end,
})
-- Fake Shot Button
FakeShotButton = Rin:CreateButton({
    Name = "Fake Shot",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.rin["rin fake shot_1"], game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://116367146157633"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "rinfakeshot", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
FakeShotKeybind = Rin:CreateKeybind({
    Name = "Fake Shot",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.rin["rin fake shot_1"], game.Players.LocalPlayer.Character.PrimaryPart)
  
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://116367146157633"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "rinfakeshot", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
AwakeningButton = Rin:CreateButton({
    Name = "Curve Shot",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.rin.curveshots, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","rin")
anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://113561329577143"
huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(0.45)
            v0.play(game:GetService("ReplicatedStorage").Resources.rin["curveshot shooted"], game.Players.LocalPlayer.Character.PrimaryPart)
  
       fireEvent(packetType, "rinpass", flag, {game.Players.LocalPlayer.Character}) 
            end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
    end,
})
CurveShotKeybind = Rin:CreateKeybind({
    Name = "Curve Shot",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://113561329577143"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(0.45)
       fireEvent(packetType, "rinpass", flag, {game.Players.LocalPlayer.Character}) 
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
    end,
})
AwakeningButton = Rin:CreateButton({
    Name = "Awakening",
    
    Callback = function()
 

game.Players.LocalPlayer:SetAttribute("style","rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://101614676107884"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.rin["rintthemehorror"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "rinOvertime", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
RinAwakeningKeybind = Rin:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
 
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://101614676107884"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.rin["rintthemehorror"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "rinOvertime", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
AwakeningButton = Rin:CreateButton({
    Name = "Overtime Awakening",
    
    Callback = function()
 
game.Players.LocalPlayer:SetAttribute("style","rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://102659853492793"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.rin["rin theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end

       fireEvent(packetType, "rinawk", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
OvertimeAwakeningKeybind = Rin:CreateKeybind({
    Name = "Overtime Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
 
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://102659853492793"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.rin["rin theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "rinawk", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
KillNoVictimButton = Rin:CreateButton({
    Name = "Crash Shot",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","rin")
anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://116628117306258"
huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
asset = game:GetObjects("rbxassetid://71702700707770")[1]
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
shared.ball.Transparency = 0
spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    shared.ball.Transparency = 1
    asset:Destroy()
end)
asset.Parent = workspace
asset.PrimaryPart.Rotation = Vector3.new(0,-180,0)
asset.PrimaryPart.Anchored = true
asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(0,0,-23)


anim2 = Instance.new("Animation")
anim2.AnimationId = "rbxassetid://77832954970885"
huh2 = asset.Humanoid:LoadAnimation(anim2)
huh2:Play()

       fireEvent(packetType, "crashShotRin", flag, {game.Players.LocalPlayer.Character,asset}) 
end,
})
CrashShotKeybind = Rin:CreateKeybind({
    Name = "Crash Shot",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://116628117306258"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://71702700707770")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Rotation = Vector3.new(0, -180, 0)
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(0, 0, -23)

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://77832954970885"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()

       fireEvent(packetType, "crashShotRin", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
-- Kill (No Victim) Button
KillNoVictimButton = Rin:CreateButton({
    Name = "Kill.(No Victim)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://130521968154479"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)

       fireEvent(packetType, "rincurveshotkill", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
KillNoVictimKeybind = Rin:CreateKeybind({
    Name = "Kill.(No Victim)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://130521968154479"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "rincurveshotkill", flag, {game.Players.LocalPlayer.Character}) 
    end,
})
-- Kill (With Victim) Button
KillWithVictimButton = Rin:CreateButton({
    Name = "Kill.(With Victim)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://105201557290830"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://71702700707770")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://81886019153496"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
       fireEvent(packetType, "vipseat", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
KillWithVictimKeybind = Rin:CreateKeybind({
    Name = "Kill.(With Victim)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://105201557290830"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://71702700707770")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://81886019153496"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()

       fireEvent(packetType, "vipseat", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
-- Center Of Gravity Button
CenterOfGravityButton = Rin:CreateButton({
    Name = "Center Of Gravity",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://124754635929905"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://71702700707770")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://84526983360707"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(0.5, 0, -3) * CFrame.Angles(0, 10, 0)
       fireEvent(packetType, "centerofgravity", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
CenterOfGravityKeybind = Rin:CreateKeybind({
    Name = "Center Of Gravity",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://124754635929905"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://71702700707770")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(0.5, 0, -3) * CFrame.Angles(0, 10, 0)

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://84526983360707"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()

        fireEvent(packetType, "centerofgravity", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
CenterOfGravityVARButton = Rin:CreateButton({
    Name = "Center Of Gravity(Admin Variant)",
    
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","rin")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://85269676168580"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://71702700707770")[1]
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
        end)
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://97478267086260"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(-5, 0, 0)
         fireEvent(packetType, "centerofeverything", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
CenterOfGravityVARKeybind = Rin:CreateKeybind({
    Name = "Center Of Gravity(Admin Variant)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
       
game.Players.LocalPlayer:SetAttribute("style","rin")
anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://85269676168580"
huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
asset = game:GetObjects("rbxassetid://71702700707770")[1]
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
shared.ball.Transparency = 0
spawn(function()
    wait(huh.Length)
    shared.ball.Transparency = 1
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    asset:Destroy()
end)
asset.Parent = workspace
asset.PrimaryPart.Anchored = true
anim2 = Instance.new("Animation")
anim2.AnimationId = "rbxassetid://97478267086260"
huh2 = asset.Humanoid:LoadAnimation(anim2)
huh2:Play()
asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(-5, 0, 0)
         fireEvent(packetType, "centerofeverything", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
-- KAISER --
KaiserSec = Kaiser:CreateSection("The Emperor")


-- Kaiser Impact Button
KaiserImpactButton = Kaiser:CreateButton({
    Name = "Kaiser Impact",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser.kaiserimpactwindup, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://88985413044521"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
        wait(0.5)
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser.kaiserimpacthitted, game.Players.LocalPlayer.Character.PrimaryPart)
  
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       
                fireEvent(packetType, "kaiserImpact", flag, {game.Players.LocalPlayer.Character})
    end,
})
KaiserImpactKeybind = Kaiser:CreateKeybind({
    Name = "Kaiser Impact",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser.kaiserimpactwindup, game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://88985413044521"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
        wait(0.5)
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser.kaiserimpacthitted, game.Players.LocalPlayer.Character.PrimaryPart)
  
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
                fireEvent(packetType, "kaiserImpact", flag, {game.Players.LocalPlayer.Character})
   end,
})
-- Kaiser Impact Magnus Button
KaiserImpactMagnusButton = Kaiser:CreateButton({
    Name = "Kaiser Impact Magnus",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser["kaiser impact magnus windup"], game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://100709498654724"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(0.4)
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser["kaiser impact magnus hitted"], game.Players.LocalPlayer.Character.PrimaryPart)
  
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
                fireEvent(packetType, "kaiserImpactmagnus", flag, {game.Players.LocalPlayer.Character})
    end,
})
KaiserImpactMagnusKeybind = Kaiser:CreateKeybind({
    Name = "Kaiser Impact Magnus",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser["kaiser impact magnus windup"], game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://100709498654724"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(0.4)
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser["kaiser impact magnus hitted"], game.Players.LocalPlayer.Character.PrimaryPart)
  
        end)
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
                fireEvent(packetType, "kaiserImpactmagnus", flag, {game.Players.LocalPlayer.Character})
    end,
})
-- Off The Ball Button
OffTheBallButton = Kaiser:CreateButton({
    Name = "Off The Ball",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser["off the ball"], game.Players.LocalPlayer.Character.PrimaryPart)
  
game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://110660551661470"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "kaiserdribble", flag, {game.Players.LocalPlayer.Character})
    end,
})
OffTheBallKeybind = Kaiser:CreateKeybind({
    Name = "Off The Ball",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser["off the ball"], game.Players.LocalPlayer.Character.PrimaryPart)
  
        game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://110660551661470"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "kaiserdribble", flag, {game.Players.LocalPlayer.Character})
    end,
})
-- Awakening Button
AwakeningButton = Kaiser:CreateButton({
    Name = "Awakening",
    
    Callback = function()
 

game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://102788235733817"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)

        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.kaiser["kaiser theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "kaiserAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})

KaiserAwakeningKeybind = Kaiser:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
 

        game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://102788235733817"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.kaiser["kaiser theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "kaiserAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})

Awakenin2gButton = Kaiser:CreateButton({
    Name = "Air Awakening",
    
    Callback = function()
 


game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = game.ReplicatedStorage.Resources.kaiser.excuseuser
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.kaiser["kaiser theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "kaiserexcuseme", flag, {game.Players.LocalPlayer.Character})
    end,
})
KaiserAwakening2Keybind = Kaiser:CreateKeybind({
    Name = "Air Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
 

        game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = game.ReplicatedStorage.Resources.kaiser.excuseuser
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.kaiser["kaiser theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "kaiserexcuseme", flag, {game.Players.LocalPlayer.Character})
    end,
})
-- Kaiser Impact Lightning Strike Button
KaiserImpactLightningStrikeButton = Kaiser:CreateButton({
    Name = "Kaiser Impact Lightning Strike",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://104940476244257"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "kaiserImpactLightningStrike", flag, {game.Players.LocalPlayer.Character})
    end,
})
KaiserLightningKeybind = Kaiser:CreateKeybind({
    Name = "Kaiser Impact Lightning Strike",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://104940476244257"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "kaiserImpactLightningStrike", flag, {game.Players.LocalPlayer.Character})
    end,
})
-- Kaiser Impact (Counter) Button
KaiserImpactCounterButton = Kaiser:CreateButton({
    Name = "Kaiser Impact(Counter)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://124379470267195"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://112644256489819")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://97335750000903"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
       fireEvent(packetType, "kaisercounter", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
KaiserCounterKeybind = Kaiser:CreateKeybind({
    Name = "Kaiser Impact(Counter)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://124379470267195"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://120361569548704")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://97335750000903"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
       fireEvent(packetType, "kaisercounter", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
KaiserImpactCounterButton = Kaiser:CreateButton({
    Name = "Kaiser Impact Magnus(Counter)",
    
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","kaiser")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://72862009672351"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://127594904163319"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

newPosition = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(4.270,0,0.5)
asset.PrimaryPart.CFrame = newPosition
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
       fireEvent(packetType, "kaiserSuperStar", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
KaiserCounterKeybind = Kaiser:CreateKeybind({
    Name = "Kaiser Impact Magnus(Counter)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        
game.Players.LocalPlayer:SetAttribute("style","kaiser")
anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://72862009672351"
huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
asset = game:GetObjects("rbxassetid://130755098980898")[1]
asset.Parent = workspace
asset.PrimaryPart.Anchored = true
anim2 = Instance.new("Animation")
anim2.AnimationId = "rbxassetid://127594904163319"
huh2 = asset.Humanoid:LoadAnimation(anim2)
huh2:Play()
asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

newPosition = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(4.270,0,0.5)
asset.PrimaryPart.CFrame = newPosition
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
shared.ball.Transparency = 0
spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    shared.ball.Transparency = 1
    asset:Destroy()
end)
       fireEvent(packetType, "kaiserSuperStar", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})

-- DON LORENZO
DonSec = DonLorenzo:CreateSection("The Zombie")

DonLorenzo:CreateButton({
    Name = "Zombie Dribble",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://102294508090597"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.donlorenzo.dribbletest, game.Players.LocalPlayer.Character.PrimaryPart)
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "zombiedribble", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Zombie Dribble",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://102294508090597"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.donlorenzo.dribbletest, game.Players.LocalPlayer.Character.PrimaryPart)
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "zombiedribble", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateButton({
    Name = "Undead Crash",
    
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://85862104307480"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.donlorenzo.skill2, game.Players.LocalPlayer.Character.PrimaryPart)
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "lorenzoundeadcrash", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Undead Crash",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://85862104307480"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.donlorenzo.skill2, game.Players.LocalPlayer.Character.PrimaryPart)
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "lorenzoundeadcrash", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateButton({
    Name = "Defensive Stance(L)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = game:GetService("ReplicatedStorage").Resources.donlorenzo.Skill3L
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "lorenzodefense", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Defensive Stance(L)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = game:GetService("ReplicatedStorage").Resources.donlorenzo.Skill3L
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "lorenzodefense", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateButton({
    Name = "Defensive Stance(R)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = game:GetService("ReplicatedStorage").Resources.donlorenzo.Skill3R
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "lorenzodefense", flag, {game.Players.LocalPlayer.Character,"Right"})
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Defensive Stance(R)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = game:GetService("ReplicatedStorage").Resources.donlorenzo.Skill3R
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "lorenzodefense", flag, {game.Players.LocalPlayer.Character,"Right"})
    end,
})

DonLorenzo:CreateButton({
    Name = "Awakening",
    
    Callback = function()
game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = game:GetService("ReplicatedStorage").Resources.donlorenzo.awakennn
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.donlorenzo["donsong"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "lorenzoAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
 
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = game:GetService("ReplicatedStorage").Resources.donlorenzo.awakennn
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.donlorenzo["donsong"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
       fireEvent(packetType, "lorenzoAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateButton({
    Name = "Horrific Intercept",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://82371642989185"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "lorenzodefensecatch", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Horrific Intercept",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://82371642989185"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "lorenzodefensecatch", flag, {game.Players.LocalPlayer.Character})
    end,
})
DonLorenzo:CreateButton({
    Name = "Ace Eater",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://118664441226421"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://98945551100236"
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
       fireEvent(packetType, "lorenzocrossup", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Ace Eater",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://118664441226421"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://98945551100236"
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
       fireEvent(packetType, "lorenzocrossup", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
DonLorenzo:CreateButton({
    Name = "Yo Michael(Success)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://108277988477847"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://94120303390899"
        asset = game:GetObjects("rbxassetid://97831389758233")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        fireEvent(packetType, "yomichealTrue", flag, {game.Players.LocalPlayer.Character,asset,true}) 
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Yo Michael(Success)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://108277988477847"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://94120303390899"
        asset = game:GetObjects("rbxassetid://97831389758233")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
       fireEvent(packetType, "yomichealTrue", flag, {game.Players.LocalPlayer.Character,asset,true}) 
    end,
})
DonLorenzo:CreateButton({
    Name = "Yo Michael(Fail)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://114151447444719"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://125462477217558"
        asset = game:GetObjects("rbxassetid://97831389758233")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
       fireEvent(packetType, "yomichealTrue", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
DonLorenzo:CreateKeybind({
    Name = "Yo Michael(Fail)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","donlorenzo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://114151447444719"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://125462477217558"
        asset = game:GetObjects("rbxassetid://97831389758233")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
            asset:Destroy()
        end)
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
       fireEvent(packetType, "yomichealTrue", flag, {game.Players.LocalPlayer.Character,asset}) 
    end,
})
--GAGAMARU--
GagamaruSec = Gagamaru:CreateSection("GOATMARU!")
Scorpion = Gagamaru:CreateButton({
    Name = "Scorpion(Windup)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","gagamaru")
     anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://126121761510176"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.gagamaru.scorpionHit, game.Players.LocalPlayer.Character.PrimaryPart)
        
        spawn(function()
            wait(huh.Length)
        end)
       fireEvent(packetType, "scorpionGamamaru", flag, {game.Players.LocalPlayer.Character})

    end,

})
ScorpionKeybind = Gagamaru:CreateKeybind({
    Name = "Scorpion(Windup)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.gagamaru.scorpionHit, game.Players.LocalPlayer.Character.PrimaryPart)
        
        game.Players.LocalPlayer:SetAttribute("style","gagamaru")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://126121761510176"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
       fireEvent(packetType, "scorpionGamamaru", flag, {game.Players.LocalPlayer.Character})
    end,
})
Scorpion2 = Gagamaru:CreateButton({
    Name = "Scorpion(Hit)",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","gagamaru")
     anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://126121761510176"
     v0.play(game:GetService("ReplicatedStorage").Resources.gagamaru.scorpionHit, game.Players.LocalPlayer.Character.PrimaryPart)
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
      
       fireEvent(packetType, "scorpionGamamaru", flag, {game.Players.LocalPlayer.Character})
        wait(0.5)

       fireEvent(packetType, "scorpionGamamaruHit", flag, {game.Players.LocalPlayer.Character})

    end,


})

ScorpionHitKeybind = Gagamaru:CreateKeybind({
    Name = "Scorpion(Hit)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
game.Players.LocalPlayer:SetAttribute("style","gagamaru")
     anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://126121761510176"
     v0.play(game:GetService("ReplicatedStorage").Resources.gagamaru.scorpionHit, game.Players.LocalPlayer.Character.PrimaryPart)
        
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
      
       fireEvent(packetType, "scorpionGamamaru", flag, {game.Players.LocalPlayer.Character})
        wait(0.5)

       fireEvent(packetType, "scorpionGamamaruHit", flag, {game.Players.LocalPlayer.Character})

    end,
})
DivingHeader = Gagamaru:CreateButton({
    Name = "Diving Header",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.gagamaru["diving headerHit"], game.Players.LocalPlayer.Character.PrimaryPart)
        
game.Players.LocalPlayer:SetAttribute("style","gagamaru")
     anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://91506202951715"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        fireEvent(packetType, "divingHeader", flag, {game.Players.LocalPlayer.Character})

    end,

})
DivingHeaderKeybind = Gagamaru:CreateKeybind({
    Name = "Diving Header",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.gagamaru["diving headerHit"], game.Players.LocalPlayer.Character.PrimaryPart)
        
        game.Players.LocalPlayer:SetAttribute("style","gagamaru")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://91506202951715"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
       
        fireEvent(packetType, "divingHeader", flag, {game.Players.LocalPlayer.Character})
    end,
})
Awakening = Gagamaru:CreateButton({
    Name = "Awakening",
    
    Callback = function()
game.Players.LocalPlayer:SetAttribute("style","gagamaru")
     anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://108990797115449"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
         if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.gagamaru["gagamaru theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "gagamaruAwk", flag, {game.Players.LocalPlayer.Character})

    end,

})

AwakeningKeybind = Gagamaru:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","gagamaru")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://108990797115449"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
         if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.gagamaru["gagamaru theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "gagamaruAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
PerfectSave = Gagamaru:CreateButton({
    Name = "Perfect Save",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","gagamaru")
     anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://135770786168984"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "gagamaruPerfectSave", flag, {game.Players.LocalPlayer.Character})

    end,

})
PerfectSaveKeybind = Gagamaru:CreateKeybind({
    Name = "Perfect Save",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","gagamaru")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://135770786168984"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "gagamaruPerfectSave", flag, {game.Players.LocalPlayer.Character})
    end,
})
PerfectSave = Gagamaru:CreateButton({
    Name = "Shachihoko",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","gagamaru")
     anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://96481474547479"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "gagamaruShachihoko", flag, {game.Players.LocalPlayer.Character})

    end,

})
ShachihokoKeybind = Gagamaru:CreateKeybind({
    Name = "Shachihoko",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","gagamaru")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://96481474547479"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "gagamaruShachihoko", flag, {game.Players.LocalPlayer.Character})
    end,
})
--BACHIRA--
BachiraSec = Bachira:CreateSection("Monster")
StepOver = Bachira:CreateButton({
    Name = "Step Overs",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.bachira.dribble, game.Players.LocalPlayer.Character.PrimaryPart)
        
        game.Players.LocalPlayer:SetAttribute("style","bachira")
         anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://84063609284472"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "stepovers", flag, {game.Players.LocalPlayer.Character})

    end,
})
StepOverKeybind = Bachira:CreateKeybind({
    Name = "Step Overs",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.bachira.dribble, game.Players.LocalPlayer.Character.PrimaryPart)
        
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://84063609284472"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "stepovers", flag, {game.Players.LocalPlayer.Character})
    end,
})
MonsterCounter = Bachira:CreateButton({
    Name = "Monster Counter(HIT)",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.bachira.dribblecounterland, game.Players.LocalPlayer.Character.PrimaryPart)
        
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://139469489709120"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "bachiracounterland", flag, {game.Players.LocalPlayer.Character})

    end,
})

MonsterCounterHitKeybind = Bachira:CreateKeybind({
    Name = "Monster Counter(HIT)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.bachira.dribblecounterland, game.Players.LocalPlayer.Character.PrimaryPart)
        
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://139469489709120"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "bachiracounterland", flag, {game.Players.LocalPlayer.Character})
    end,
})

MonsterCounter = Bachira:CreateButton({
    Name = "Bon",
    
    Callback = function()

        v0.play(game:GetService("ReplicatedStorage").Resources.bachira["ground bonNN"], game.Players.LocalPlayer.Character.PrimaryPart)
        
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://134009712042797"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(0.2)
            v0.play(game:GetService("ReplicatedStorage").Resources.bachira["ground bonNN KICKED"], game.Players.LocalPlayer.Character.PrimaryPart)
            
            end)
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "bon", flag, {game.Players.LocalPlayer.Character})

    end,
})
BonKeybind = Bachira:CreateKeybind({
    Name = "Bon",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        
        v0.play(game:GetService("ReplicatedStorage").Resources.bachira["ground bonNN"], game.Players.LocalPlayer.Character.PrimaryPart)
        
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://134009712042797"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        shared.ball.Transparency = 0
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(0.2)
            v0.play(game:GetService("ReplicatedStorage").Resources.bachira["ground bonNN KICKED"], game.Players.LocalPlayer.Character.PrimaryPart)
            
            end)
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "bon", flag, {game.Players.LocalPlayer.Character})
 end,
})
AwakeningMonster = Bachira:CreateButton({
    Name = "Awakening",
    
    Callback = function()
 if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.bachira["bachira theme (1)"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        game.Players.LocalPlayer:SetAttribute("style","bachira")
         anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://81294128284141"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()

        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "bachiraAwk", flag, {game.Players.LocalPlayer.Character})

    end,
})
AwakeningMonsterKeybind = Bachira:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
 
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://81294128284141"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.bachira["bachira theme (1)"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "bachiraAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
TranceMonster = Bachira:CreateButton({
    Name = "Monster Trance",
    
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","bachira")
         anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://78291479497318"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://127249251200438"
        asset.Humanoid:LoadAnimation(anim2):Play()
        shared.ball.Transparency = 0
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            asset:Destroy()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "monsterTrance", flag, {game.Players.LocalPlayer.Character,asset})

    end,
})
TranceMonsterKeybind = Bachira:CreateKeybind({
    Name = "Monster Trance",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://78291479497318"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 5
        newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://127249251200438"
        asset.Humanoid:LoadAnimation(anim2):Play()
        shared.ball.Transparency = 0
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            asset:Destroy()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "monsterTrance", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
BeeShoot = Bachira:CreateButton({
    Name = "Bee Shoot",
    
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://126541372789193"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()

        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "beeShot", flag, {game.Players.LocalPlayer.Character})

    end,
})
BeeShootKeybind = Bachira:CreateKeybind({
    Name = "Bee Shoot",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","bachira")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://126541372789193"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            shared.ball.Transparency = 1
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        fireEvent(packetType, "beeShot", flag, {game.Players.LocalPlayer.Character})
    end,
})
--YUKIMIYA--
YukimiyaSec = Yukimiya:CreateSection("Street Style of Soccer")
GyroBtn = Yukimiya:CreateButton({
    Name = "Gyro Shot",
    
    Callback = function()
       
v0.play(game:GetService("ReplicatedStorage").Resources.yukimiya["gyro shoot"], game.Players.LocalPlayer.Character.PrimaryPart)
game.Players.LocalPlayer:SetAttribute("style","yukimiya")
anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://123971192040493"
huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
    shared.ball.Transparency = 0

game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    shared.ball.Transparency = 1
end)

spawn(function()
    wait(0.4)
    v0.play(game:GetService("ReplicatedStorage").Resources.yukimiya["gyro shoot hitted"], game.Players.LocalPlayer.Character.PrimaryPart)

    end)
        fireEvent(packetType, "gyroShot", flag, {game.Players.LocalPlayer.Character})


    end,
})
GyroShotKeybind = Yukimiya:CreateKeybind({
    Name = "Gyro Shot",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
       
v0.play(game:GetService("ReplicatedStorage").Resources.yukimiya["gyro shoot"], game.Players.LocalPlayer.Character.PrimaryPart)
game.Players.LocalPlayer:SetAttribute("style","yukimiya")
anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://123971192040493"
huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
huh:Play()
    shared.ball.Transparency = 0

game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    shared.ball.Transparency = 1
end)

spawn(function()
    wait(0.4)
    v0.play(game:GetService("ReplicatedStorage").Resources.yukimiya["gyro shoot hitted"], game.Players.LocalPlayer.Character.PrimaryPart)

    end)
        fireEvent(packetType, "gyroShot", flag, {game.Players.LocalPlayer.Character})


    end,
})
GyroBtn = Yukimiya:CreateButton({
    Name = "Cut In",
    
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","yukimiya")
        local asset = game:GetObjects("rbxassetid://120361569548704")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
         frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector
                newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
                asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
     
     shared.ball.Transparency = 0
        local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.CutIn)
        track:Play()
        spawn(function()
            wait(track.Length)
            asset:Destroy()
             shared.ball.Transparency = 1
        end)
        v0.play(game:GetService("ReplicatedStorage").Resources.yukimiya["cut in"], game.Players.LocalPlayer.Character.PrimaryPart)
     
        fireEvent(packetType, "fakeoutstart", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
GyroShotKeybind = Yukimiya:CreateKeybind({
    Name = "Cut In",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","yukimiya")
        local asset = game:GetObjects("rbxassetid://120361569548704")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
         frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector
                newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
                asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        
     shared.ball.Transparency = 0
        local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.CutIn)
        track:Play()
        spawn(function()
            wait(track.Length)
            asset:Destroy()
             shared.ball.Transparency = 1
        end)
        v0.play(game:GetService("ReplicatedStorage").Resources.yukimiya["cut in"], game.Players.LocalPlayer.Character.PrimaryPart)
     
        fireEvent(packetType, "fakeoutstart", flag, {game.Players.LocalPlayer.Character,asset})

    end,
})
SpeedRBtn = Yukimiya:CreateButton({
    Name = "Speed Dribble(R)",
    
    Callback = function()
    
       

 
        game.Players.LocalPlayer:SetAttribute("style","yukimiya")
              anim = Instance.new("Animation")
           anim.AnimationId = "rbxassetid://126152311502598"
              huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
              huh:Play()
              
              spawn(function()
                  wait(huh.Length + 0.1)
                  huh:Stop()
                  anim = Instance.new("Animation")
           anim.AnimationId = "rbxassetid://89726738490171"
                  huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
              huh:Play()
            end)
             
        fireEvent(packetType, "yukimiya3Start", flag, {game.Players.LocalPlayer.Character,true})


    end,
})

SpeedDribbleRKeybind = Yukimiya:CreateKeybind({
    Name = "Speed Dribble(R)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
      
 

 
  game.Players.LocalPlayer:SetAttribute("style","yukimiya")
        anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://126152311502598"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        spawn(function()
            wait(huh.Length + 0.1)
            huh:Stop()
            anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://89726738490171"
            huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
      end)
        fireEvent(packetType, "yukimiya3Start", flag, {game.Players.LocalPlayer.Character,true})
 
    end,
})
SpeedLBtn = Yukimiya:CreateButton({
    Name = "Speed Dribble(L)",
    
    Callback = function()
         
 

 
  game.Players.LocalPlayer:SetAttribute("style","yukimiya")
        anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://82903297153304"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        spawn(function()
            wait(huh.Length + 0.1)
            huh:Stop()
            anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://83670844451263"
            huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
      end)
        fireEvent(packetType, "yukimiya3Start", flag, {game.Players.LocalPlayer.Character,false})



    end,
})
SpeedDribbleLKeybind = Yukimiya:CreateKeybind({
    Name = "Speed Dribble(L)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
    
  game.Players.LocalPlayer:SetAttribute("style","yukimiya")
  anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://82903297153304"
  huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
  huh:Play()
  
  spawn(function()
      wait(huh.Length + 0.1)
      huh:Stop()
      anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://83670844451263"
      huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
  huh:Play()
end)
        fireEvent(packetType, "yukimiya3Start", flag, {game.Players.LocalPlayer.Character,false})

    end,
})
SpeedLBtn = Yukimiya:CreateButton({
    Name = "Arc Break",
    
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.yukimiya["countered (2)"], game.Players.LocalPlayer.Character.PrimaryPart)

 

 
  game.Players.LocalPlayer:SetAttribute("style","yukimiya")
        anim = Instance.new("Animation")
     anim.AnimationId = "rbxassetid://129005162642534"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        shared.ball.Transparency = 0
        spawn(function()
            shared.ball.Transparency = 1
      end)
        fireEvent(packetType, "yukimiya4Confirm", flag, {game.Players.LocalPlayer.Character})

    end,
})
SpeedDribbleLKeybind = Yukimiya:CreateKeybind({
    Name = "Arc Break",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.yukimiya["countered (2)"], game.Players.LocalPlayer.Character.PrimaryPart)
      
  game.Players.LocalPlayer:SetAttribute("style","yukimiya")
  anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://129005162642534"
  huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
  huh:Play()
  
  shared.ball.Transparency = 0
  spawn(function()
      shared.ball.Transparency = 1
end)
        fireEvent(packetType, "yukimiya4Confirm", flag, {game.Players.LocalPlayer.Character})

    end,
})
GyroBtn = Yukimiya:CreateButton({
    Name = "Awakening",
    
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "yukimiya")
        
        local asset = game:GetObjects("rbxassetid://125094267269605")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        
        local frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector
        local newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Awakening)
        track:Play()
        
        local track2 = asset.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.AwakeningVictim)
        track2:Play()
        
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic then 
           
            fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.yukimiya.yukisong,false,require(game.ReplicatedStorage.wiki.styles).yukimiya.color})
        end
        fireEvent(packetType, "yukimiyaFlow", flag, {game.Players.LocalPlayer.Character, asset})
    end,
})
GyroShotKeybind = Yukimiya:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "yukimiya")
        
        local asset = game:GetObjects("rbxassetid://125094267269605")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        
        local frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector
        local newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
        asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Awakening)
        track:Play()
        
        local track2 = asset.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.AwakeningVictim)
        track2:Play()
        
        shared.ball.Transparency = 0
        
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic then  
            fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.yukimiya.yukisong,false,require(game.ReplicatedStorage.wiki.styles).yukimiya.color})
        end
        fireEvent(packetType, "yukimiyaFlow", flag, {game.Players.LocalPlayer.Character, asset})
    end,
})

GyroBtn = Yukimiya:CreateButton({
    Name = "Street Style Dribble(Surpass Enemy)",
    
    Callback = function()
       
 game.Players.LocalPlayer:SetAttribute("style","yukimiya")
 local  asset = game:GetObjects("rbxassetid://125094267269605")[1]
 asset.Parent = workspace
 asset.PrimaryPart.Anchored = true
  frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 3
         newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
         asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
 game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
 local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5Success)
 track:Play()
 local track2 = asset.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5SuccessV)
 track2:Play()
 shared.ball.Transparency = 0
 spawn(function()
     wait(track.Length)
     game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
     asset:Destroy()
     shared.ball.Transparency = 1
     end)  
        fireEvent(packetType, "yukimiya5", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
GyroShotKeybind = Yukimiya:CreateKeybind({
    Name = "Street Style Dribble(Surpass Enemy)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        
 game.Players.LocalPlayer:SetAttribute("style","yukimiya")
 local  asset = game:GetObjects("rbxassetid://125094267269605")[1]
 asset.Parent = workspace
 asset.PrimaryPart.Anchored = true
  frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 3
         newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
         asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
 game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
 local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5Success)
 track:Play()
 local track2 = asset.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5SuccessV)
 track2:Play()
 shared.ball.Transparency = 0
 spawn(function()
     wait(track.Length)
     game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
     asset:Destroy()
     shared.ball.Transparency = 1
     end)  
        fireEvent(packetType, "yukimiya5", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
GyroBtn = Yukimiya:CreateButton({
    Name = "Street Style Dribble(Gyro Shot)",
    
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","yukimiya")
        local  asset = game:GetObjects("rbxassetid://125094267269605")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
         frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 3
                newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
                asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        
        local  asset2 = game:GetObjects("rbxassetid://120361569548704")[1]
        asset2.Parent = workspace
        asset2.PrimaryPart.Anchored = true
         frontOffset2 = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 3
                newPosition2 = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
                asset2.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5Success2)
        track:Play()
        local track2 = asset.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5SuccessN1)
        track2:Play()
        local track3 = asset2.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5SuccessN2)
        track3:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
            asset2:Destroy()
           shared.ball.Transparency = 1
            end)
        fireEvent(packetType, "yukimiya5gyro", flag, {game.Players.LocalPlayer.Character,asset,asset2})
    end,
})
GyroShotKeybind = Yukimiya:CreateKeybind({
    Name = "Street Style Dribble(Gyro Shot)",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","yukimiya")
        local  asset = game:GetObjects("rbxassetid://125094267269605")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
         frontOffset = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 3
                newPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
                asset.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        
        local  asset2 = game:GetObjects("rbxassetid://125094267269605")[1]
        asset2.Parent = workspace
        asset2.PrimaryPart.Anchored = true
         frontOffset2 = game.Players.LocalPlayer.Character.PrimaryPart.CFrame.LookVector * 3
                newPosition2 = game.Players.LocalPlayer.Character.PrimaryPart.Position + frontOffset
                asset2.PrimaryPart.CFrame = CFrame.new(newPosition, game.Players.LocalPlayer.Character.PrimaryPart.Position)
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5Success2)
        track:Play()
        local track2 = asset.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5SuccessN1)
        track2:Play()
        local track3 = asset2.Humanoid:LoadAnimation(game:GetService("ReplicatedStorage").Resources.yukimiya.Skill5SuccessN2)
        track3:Play()
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
            asset2:Destroy()
           shared.ball.Transparency = 1
            end)
        fireEvent(packetType, "yukimiya5gyro", flag, {game.Players.LocalPlayer.Character,asset,asset2})
    end,
})
--SAKURA IZAYOI--
SakuyaSec = Sakuya:CreateSection("Timestopping maid")
StepBehindBtn = Sakuya:CreateButton({
    Name = "Step Behind",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","izayoi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://124313162244889"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.izayoi.sakuya, game.Players.LocalPlayer.Character.PrimaryPart)
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "izayoistepbehind", flag, {game.Players.LocalPlayer.Character})
    end,
})
StepBehindKeybind = Sakuya:CreateKeybind({
    Name = "Step Behind",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","izayoi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://124313162244889"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.izayoi.sakuya, game.Players.LocalPlayer.Character.PrimaryPart)
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "izayoistepbehind", flag, {game.Players.LocalPlayer.Character})
    end,
})

PowerfulStrikerBtn = Sakuya:CreateButton({
    Name = "Powerful Striker",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","izayoi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://90781949061659"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser.kaiserimpactwindup, game.Players.LocalPlayer.Character.PrimaryPart)
        
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        wait(0.5)
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser.kaiserimpacthitted, game.Players.LocalPlayer.Character.PrimaryPart)
        
        
        fireEvent(packetType, "powerfulstriker", flag, {game.Players.LocalPlayer.Character})
    end,
})
PowerfulStrikerKeybind = Sakuya:CreateKeybind({
    Name = "Powerful Striker",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","izayoi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://90781949061659"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser.kaiserimpactwindup, game.Players.LocalPlayer.Character.PrimaryPart)
        
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        wait(0.5)
        v0.play(game:GetService("ReplicatedStorage").Resources.kaiser.kaiserimpacthitted, game.Players.LocalPlayer.Character.PrimaryPart)
        
        fireEvent(packetType, "powerfulstriker", flag, {game.Players.LocalPlayer.Character})
    end,
})
AwakeningBtn = Sakuya:CreateButton({
    Name = "Awakening",
    
    Callback = function()
 game.Players.LocalPlayer:SetAttribute("style","izayoi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://72746027650829"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.izayoi["sakuya theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "izayoiAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
AwakeningKeybind = Sakuya:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
 
        game.Players.LocalPlayer:SetAttribute("style","izayoi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://72746027650829"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.izayoi["sakuya theme"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "izayoiAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
TimeStopBtn = Sakuya:CreateButton({
    Name = "Time Stop",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","izayoi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://97038357833996"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "TimeStop", flag, {game.Players.LocalPlayer.Character})
    end,
})
Sakuya:CreateKeybind({
    Name = "Time Stop",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","izayoi")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://97038357833996"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "TimeStop", flag, {game.Players.LocalPlayer.Character})
    end,
})
-- RONALDO --
CR7DribbleBtn = Ronaldo:CreateButton({
    Name = "CR7 Dribble",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://88322771999430"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
  
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "cr7dribble", flag, {game.Players.LocalPlayer.Character})
    end,
})
Ronaldo:CreateKeybind({
    Name = "CR7 Dribble",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://88322771999430"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()

        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "cr7dribble", flag, {game.Players.LocalPlayer.Character})
    end,
})
BicycleCR7Btn = Ronaldo:CreateButton({
    Name = "Bicycle Kick",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://126734456236034"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        wait(1)
       
        fireEvent(packetType, "cr7Kick", flag, {game.Players.LocalPlayer.Character})
    end,
})
Ronaldo:CreateKeybind({
    Name = "Bicycle Kick",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
      
game.Players.LocalPlayer:SetAttribute("style","ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://126734456236034"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        wait(1)
       
        fireEvent(packetType, "cr7Kick", flag, {game.Players.LocalPlayer.Character})
    end,
})
BicycleCR7Btn = Ronaldo:CreateButton({
    Name = "Awakening",
    
    Callback = function()
 

game.Players.LocalPlayer:SetAttribute("style","ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://70567445052722"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
     if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.ronaldo["0508"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "ronaldoAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})

Ronaldo:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://70567445052722"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
         if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.ronaldo["0508"],false,require(game.ReplicatedStorage.wiki.styles)[game.Players.LocalPlayer:GetAttribute("style")].color})
            end
        fireEvent(packetType, "ronaldoAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
BicycleCR7Btn = Ronaldo:CreateButton({
    Name = "Greatest Of All Time",
    
    Callback = function()
 
        game.Players.LocalPlayer:SetAttribute("style","ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://117697415418770"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "ronaldoIttooeasy", flag, {game.Players.LocalPlayer.Character})
    end,
})

Ronaldo:CreateKeybind({
    Name = "Greatest Of All Time",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://117697415418770"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "ronaldoIttooeasy", flag, {game.Players.LocalPlayer.Character})
    end,
})
skillissue = Ronaldo:CreateButton({
    Name = "Skill Gap",
    
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://86972968217125"
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        asset = game:GetObjects("rbxassetid://125094267269605")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = false
        
        shared.ball.Transparency = 0
        local Weld = Instance.new("Weld")
			Weld.Part0 = game.Players.LocalPlayer.Character.PrimaryPart
			Weld.Part1 = asset.PrimaryPart
			Weld.Parent = asset.PrimaryPart
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://128924947008736"
        spawn(function()
        wait(1)
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        track2 = asset.Humanoid:LoadAnimation(anim2)
        track2:Play()
        spawn(function()
            wait(track.Length)
            Weld:Destroy()
            track:Stop()
            shared.ball.Transparency = 1
            track2:Stop()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        
            asset:Destroy()
        end)
        
        end)
        fireEvent(packetType, "SkillGapRonaldo", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
Ronaldo:CreateKeybind({
    Name = "Skill Gap",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style", "ronaldo")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://86972968217125"
        
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        asset = game:GetObjects("rbxassetid://125094267269605")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = false
        
        shared.ball.Transparency = 0
        local Weld = Instance.new("Weld")
			Weld.Part0 = game.Players.LocalPlayer.Character.PrimaryPart
			Weld.Part1 = asset.PrimaryPart
			Weld.Parent = asset.PrimaryPart
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://128924947008736"
        spawn(function()
        wait(1)
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        track2 = asset.Humanoid:LoadAnimation(anim2)
        track2:Play()
        spawn(function()
            wait(track.Length)
            Weld:Destroy()
            track:Stop()
            shared.ball.Transparency = 1
            track2:Stop()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        
            asset:Destroy()
        end)
        
        end)
        fireEvent(packetType, "SkillGapRonaldo", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
-- EXE --
ExeSec = Exe:CreateSection("Sonic.exe")
ShortcutBtn = Exe:CreateButton({
    Name = "Shortcut OLD",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","exe")
  anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://96372880288738"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        
      
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "Shortcut", flag, {game.Players.LocalPlayer.Character})
    end,
})
Exe:CreateKeybind({
    Name = "Shortcut OLD",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","exe")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://96372880288738"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()

        
        

        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "Shortcut", flag, {game.Players.LocalPlayer.Character})
    end,
})
ShortcutBtn = Exe:CreateButton({
    Name = "Shortcut",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","exe")
  anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://116455589260954"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.exe.dribble, game.Players.LocalPlayer.Character.PrimaryPart)
        
        
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "DashSuper", flag, {game.Players.LocalPlayer.Character})
    end,
})
Exe:CreateKeybind({
    Name = "Shortcut",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()

        game.Players.LocalPlayer:SetAttribute("style","exe")
  anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://116455589260954"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        v0.play(game:GetService("ReplicatedStorage").Resources.exe.dribble, game.Players.LocalPlayer.Character.PrimaryPart)
        
        
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            shared.ball.Transparency = 1
        end)
        
        fireEvent(packetType, "DashSuper", flag, {game.Players.LocalPlayer.Character})
    end,
})
TPBtn = Exe:CreateButton({
    Name = "Exterminate",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","exe")
        anim = game:GetService("ReplicatedStorage").Resources.exe.Tp
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        v0.play(game:GetService("ReplicatedStorage").Resources.exe.Tped, game.Players.LocalPlayer.Character.PrimaryPart)
        
        
        
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "TP", flag, {game.Players.LocalPlayer.Character})
    end,
})
Exe:CreateKeybind({
    Name = "Exterminate",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","exe")
        anim = game:GetService("ReplicatedStorage").Resources.exe.Tp
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true

        v0.play(game:GetService("ReplicatedStorage").Resources.exe.Tped, game.Players.LocalPlayer.Character.PrimaryPart)
        
        

        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "TP", flag, {game.Players.LocalPlayer.Character})
    end,
})
StrikeBtn = Exe:CreateButton({
    Name = "Strike",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","exe")
        anim = game:GetService("ReplicatedStorage").Resources.exe.Kick
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        
        v0.play(game:GetService("ReplicatedStorage").Resources.exe.WindUp, game.Players.LocalPlayer.Character.PrimaryPart)
             
        shared.ball.Transparency = 0
        spawn(function()
        wait(3.75)
        v0.play(game:GetService("ReplicatedStorage").Resources.exe.KickS, game.Players.LocalPlayer.Character.PrimaryPart)
             
        end)
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "DASTStrike", flag, {game.Players.LocalPlayer.Character})
        fireEvent(packetType, "DASTStrikeEFFECT", flag, {game.Players.LocalPlayer.Character})
    end,
})
Exe:CreateKeybind({
    Name = "Strike",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
       
game.Players.LocalPlayer:SetAttribute("style","exe")
anim = game:GetService("ReplicatedStorage").Resources.exe.Kick
track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
track:Play()
game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true


v0.play(game:GetService("ReplicatedStorage").Resources.exe.WindUp, game.Players.LocalPlayer.Character.PrimaryPart)
     
shared.ball.Transparency = 0
spawn(function()
wait(3.75)
v0.play(game:GetService("ReplicatedStorage").Resources.exe.KickS, game.Players.LocalPlayer.Character.PrimaryPart)
     
end)
spawn(function()
    wait(track.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    shared.ball.Transparency = 1
end)
        fireEvent(packetType, "DASTStrike", flag, {game.Players.LocalPlayer.Character})
        fireEvent(packetType, "DASTStrikeEFFECT", flag, {game.Players.LocalPlayer.Character})
    end,
})
AwkBtn = Exe:CreateButton({
    Name = "Awakening",
    
    Callback = function()
 

game.Players.LocalPlayer:SetAttribute("style","exe")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://131202945094680"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
     
        if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.exe["awkSong"],false,require(game.ReplicatedStorage.wiki.styles).exe.color})
            end
        fireEvent(packetType, "exeAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
Exe:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","exe")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://131202945094680"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true

        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
 if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.exe["awkSong"],false,require(game.ReplicatedStorage.wiki.styles).exe.color})
            end
        fireEvent(packetType, "exeAwk", flag, {game.Players.LocalPlayer.Character})
    end,
})
-- CHAPTER --
ChapterSec = Chapter:CreateSection("Chapterman IG?")
StrikeBtn = Chapter:CreateButton({
    Name = "Strike",
    
    Callback = function()

game.Players.LocalPlayer:SetAttribute("style","chapter")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://83123931455588"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "ChapterStrike", flag, {game.Players.LocalPlayer.Character})
    end,
})
Chapter:CreateKeybind({
    Name = "Strike",
    CurrentKeybind = "Minus",
    HoldToInteract = false,
    Callback = function()
        game.Players.LocalPlayer:SetAttribute("style","chapter")
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://83123931455588"
        track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        track:Play()
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true

        shared.ball.Transparency = 0
        spawn(function()
            wait(track.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            shared.ball.Transparency = 1
        end)
        fireEvent(packetType, "ChapterStrike", flag, {game.Players.LocalPlayer.Character})
    end,
})

-- OTHER --
FinalMatchSaeBtn = Other:CreateButton({
    Name = "Final Match(Sae User)",
    
    Callback = function()

        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        spawn(function()
            wait(53)
            asset:Destroy()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)
        
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame
        
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://140674326588943"
        huh = asset.Humanoid:LoadAnimation(anim)
        huh:Play()
        
        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
            shared.ball.Transparency = 1
        end)
        
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://122378511467872"
        huh2 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim2)
        huh2:Play()
        fireEvent(packetType, "finalmatch", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})



Other:CreateKeybind({ 
    Name = "Final Match (Sae User)",
    CurrentKeybind = "Minus",  -- space keybind
    HoldToInteract = false,
    Callback = function()
        asset = game:GetObjects("rbxassetid://130755098980898")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        asset.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame

        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://140674326588943"
        huh = asset.Humanoid:LoadAnimation(anim)
        huh:Play()

        shared.ball.Transparency = 0
        spawn(function()
            wait(huh.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            asset:Destroy()
            shared.ball.Transparency = 1
        end)

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://122378511467872"
        huh2 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim2)
        huh2:Play()

        spawn(function()
            wait(53)
            asset:Destroy()
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
        end)

        fireEvent(packetType, "finalmatch", flag, {game.Players.LocalPlayer.Character,asset})
    end,
})
FinalMatchRinBtn = Other:CreateButton({
    Name = "Final Match(Rin User)",
    
    Callback = function()

        asset = game:GetObjects("rbxassetid://120361569548704")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true
        
        ballwhat = game:GetObjects("rbxassetid://104337640012440")[1]
        ballwhat.Anchored = true
        ballwhat.Parent = asset
        ballwhat.ball.Part0 = asset.PrimaryPart
        ballwhat.Anchored = false
        ballwhat.Transparency = 0
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
        
        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://140674326588943"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
        
        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://122378511467872"
        huh2 = asset.Humanoid:LoadAnimation(anim2)
        
        spawn(function()
            wait(huh2.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            ballwhat.Transparency = 1
            asset:Destroy()
        end)
        
        asset.PrimaryPart.CFrame = workspace.map.neon.select.B.CF.CFrame + Vector3.new(0, 3, 0)
        game.Players.LocalPlayer.Character.PrimaryPart.CFrame = asset.PrimaryPart.CFrame
        huh:Play()
        huh2:Play()
        fireEvent(packetType, "finalmatch", flag, {asset,game.Players.LocalPlayer.Character})
    end,
})
Other:CreateKeybind({
    Name = "Final Match (Rin User)",
    CurrentKeybind = "Minus",  -- space keybind
    HoldToInteract = false,
    Callback = function()
        asset = game:GetObjects("rbxassetid://120361569548704")[1]
        asset.Parent = workspace
        asset.PrimaryPart.Anchored = true

        ballwhat = game:GetObjects("rbxassetid://104337640012440")[1]
        ballwhat.Parent = asset
        ballwhat.Anchored = false
        ballwhat.Transparency = 0

        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true

        anim = Instance.new("Animation")
        anim.AnimationId = "rbxassetid://140674326588943"
        huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)

        anim2 = Instance.new("Animation")
        anim2.AnimationId = "rbxassetid://122378511467872"
        huh2 = asset.Humanoid:LoadAnimation(anim2)

        huh:Play()
        huh2:Play()

        asset.PrimaryPart.CFrame = workspace.map.neon.select.B.CF.CFrame + Vector3.new(0, 3, 0)
        game.Players.LocalPlayer.Character.PrimaryPart.CFrame = asset.PrimaryPart.CFrame

        spawn(function()
            wait(huh2.Length)
            game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
            ballwhat.Transparency = 1
            asset:Destroy()
        end)
        fireEvent(packetType, "finalmatch", flag, {asset,game.Players.LocalPlayer.Character})
    end,
})
RainBtn = Other:CreateButton({
    Name = "Rain",
    
    Callback = function()

        fireEvent(packetType, "rain_weather", flag, {true})
    end,
})

Other:CreateKeybind({
    Name = "Rain",
    CurrentKeybind = "Minus",  -- space keybind
    HoldToInteract = false,
    Callback = function()
        fireEvent(packetType, "rain_weather", flag, {true})
    end,
})
RainBtn = Other:CreateButton({
    Name = "Fix Ball",
    
    Callback = function()
        shared.ball = game:GetObjects("rbxassetid://104337640012440")[1]
        shared.ball.Parent = game.Players.LocalPlayer.Character
        shared.ball.Anchored = true
        shared.ball.ball.Part0 = game.Players.LocalPlayer.Character.PrimaryPart
        shared.ball.Anchored = false
        shared.ball.Transparency = 1
    end,
})
DonLorenzoAuraBtn = Other:CreateButton({
    Name = "Don Lorenzo Aura",
Callback = function()

        for _, v814 in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if v814:IsA("Part") and v814.Transparency < 1 then
                for _, v815 in ipairs(game.ReplicatedStorage.Resources.donlorenzo.ult4aura:GetChildren()) do
                    v816 = v815:Clone()
                    v816.Parent = v814
                end
            end
        end
    end,
})

Other:CreateToggle({
   Name = "Awakening Music",
   CurrentValue = false,
   Flag = "UseAwkMusic",  -- Ensure this flag exists
   Callback = function(Value)
      getgenv().UseAwkMusic = Value  -- Set the global flag based on the toggle
   end,
})
RainBtn = Other:CreateButton({
    Name = "Stop Awakening Music",
    
    Callback = function()
        for _, sounds in ipairs(game.SoundService:GetChildren()) do
            if sounds:IsA("Sound") and sounds.Name ~= "old" and sounds.Name ~= "football-crowd-3-69245" then
                sounds:Stop()
                sounds:Destroy()
            end
        end
    end,
})


Other:CreateKeybind({
    Name = "Don Lorenzo Aura",
    CurrentKeybind = "Minus",  -- space keybind
    HoldToInteract = false,
    Callback = function()
        for _, part in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if part:IsA("Part") and part.Transparency < 1 then
                for _, auraPart in ipairs(game.ReplicatedStorage.Resources.donlorenzo.ult4aura:GetChildren()) do
                    auraPart:Clone().Parent = part
                end
            end
        end
    end,
})
--MVPS--

MVPSec = MVP:CreateSection("All MVPs of Azl")
local domvp = function(MVPNAME)
    
    game.Players.LocalPlayer.Character.PrimaryPart.CFrame = workspace.map.something.mvpCF.CFrame
    anim = require(game:GetService("ReplicatedStorage").wiki.mvpAnimations)[MVPNAME].animation
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    if require(game:GetService("ReplicatedStorage").wiki.mvpAnimations)[MVPNAME].customCFrame then
        game.Players.LocalPlayer.Character.PrimaryPart.CFrame = require(game:GetService("ReplicatedStorage").wiki.mvpAnimations)[MVPNAME].customCFrame
    end
    if MVPNAME == "u20" then
    
        for i = 1, 4 do
            local rig = game:GetService("ReplicatedStorage").Resources.mvpAssets["Rig"..i]:Clone()
            rig.Parent = workspace
rig:SetPrimaryPartCFrame(require(game:GetService("ReplicatedStorage").wiki.mvpAnimations)["u20"].customCFrame)
rig.PrimaryPart.Anchored = true
            local humanoid = rig:FindFirstChildOfClass("Humanoid")
            local anim = game:GetService("ReplicatedStorage").Resources.mvpAssets.u20["AnimationRig"..i]

    
            if humanoid and anim then
                huh = humanoid:LoadAnimation(anim)
                huh:Play()
                spawn(function()
                    wait(huh.Length)
                    rig:Destroy()
                end)
            end
    end
    end
  
    spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    end)
    spawn(function()
        wait(huh.Length)
          if game.Players.LocalPlayer.Character:FindFirstChild("eff") then
           game.Players.LocalPlayer.Character.eff:Destroy()
           end
        end)
    spawn(function()
     if require(game:GetService("ReplicatedStorage").wiki.mvpAnimations)[MVPNAME].score_length then
       
        wait(require(game:GetService("ReplicatedStorage").wiki.mvpAnimations)[MVPNAME].score_length)
     
         require(game.ReplicatedStorage.client.replication).mvpGoal(tostring(game:GetService("ReplicatedStorage").workspace.Ascore.Value), tostring(game:GetService("ReplicatedStorage").workspace.Bscore.Value), "A", nil)
        end
    end)

    
        fireEvent(packetType, "mvp_"..MVPNAME, flag, {game.Players.LocalPlayer.Character, huh.Length})    
   
end
firstflow = MVP:CreateButton({
    Name = "First Flow",
Callback = function()
domvp("firstFlow")
    end,
})
specialGoal = MVP:CreateButton({
    Name = "specialGoal",
Callback = function()
domvp("specialGoal")
    end,
})
kaiserTriumph = MVP:CreateButton({
    Name = "kaiserTriumph",
Callback = function()
domvp("kaiserTriumph")
    end,
})
nagiSeishiro = MVP:CreateButton({
    Name = "nagiSeishiro",
Callback = function()
domvp("nagiSeishiro")
    end,
})
rinTriumph = MVP:CreateButton({
    Name = "rinTriumph",
Callback = function()
domvp("rinTriumph")
    end,
})
chigiriTriumph = MVP:CreateButton({
    Name = "chigiriTriumph",
Callback = function()
domvp("chigiriTriumph")
    end,
})
isagiTriumph = MVP:CreateButton({
    Name = "isagiTriumph",
Callback = function()
domvp("isagiTriumph")
    end,
})
FieldKing = MVP:CreateButton({
    Name = "FieldKing",
Callback = function()
domvp("FieldKing")
    end,
})

Dopamine = MVP:CreateButton({
    Name = "Dopamine",
Callback = function()
domvp("Dopamine")
    end,
})
king = MVP:CreateButton({
    Name = "king",
Callback = function()
domvp("king")
    end,
})

explosion = MVP:CreateButton({
    Name = "explosion",
Callback = function()
domvp("explosion")
    end,
})
executedCelebration = MVP:CreateButton({
    Name = "executedCelebration",
Callback = function()
domvp("executedCelebration")
    end,
})
u20 = MVP:CreateButton({
    Name = "u20",
Callback = function()
domvp("u20")
    end,
})
isagiDemon = MVP:CreateButton({
    Name = "isagiDemon",
Callback = function()
domvp("isagiDemon")
    end,
})
inoMVP = MVP:CreateButton({
    Name = "inoMvp",
Callback = function()
domvp("inoMvp")
    end,
})
nagiMvp = MVP:CreateButton({
    Name = "nagiMvp",
Callback = function()
domvp("nagiMvp")
    end,
})
ronaldoMvp = MVP:CreateButton({
    Name = "ronaldoMvp",
Callback = function()
domvp("ronaldoMvp")
    end,
})


--Chigiri



ChigiriSec = Chigiri:CreateSection("Pink Panther/Kunigami's Wife(jk)")

Mach = Chigiri:CreateButton({
    Name = "Mach Cut-In",
Callback = function()
    v0.play(game:GetService("ReplicatedStorage").Resources.chigiri["Mach cut in dash"], game.Players.LocalPlayer.Character.PrimaryPart)
       
    game.Players.LocalPlayer:SetAttribute("style","chigiri")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://88448030655006"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                
                shared.ball.Transparency = 0
                spawn(function()
                wait(huh.Length)
              
                shared.ball.Transparency = 1
                end)
local char = Instance.new("ObjectValue",workspace)

char.Value = game:GetService("Players").LocalPlayer.Character
local boolean = Instance.new("BoolValue",workspace)

local var = Instance.new("NumberValue",workspace)

var.Value = 0

        fireEvent(packetType, "MachKick", flag, {{Character = char,Left = boolean,Variant = var}})
       
    end,
})

local Machbind = Chigiri:CreateKeybind({
    Name = "Mach Cut-In",
    CurrentKeybind = "Minus",  -- space keybind
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.chigiri["Mach cut in dash"], game.Players.LocalPlayer.Character.PrimaryPart)
           
        game.Players.LocalPlayer:SetAttribute("style","chigiri")
                    anim = Instance.new("Animation")
                    anim.AnimationId = "rbxassetid://88448030655006"
                    
                    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                    huh:Play()
                    
                    shared.ball.Transparency = 0
                    spawn(function()
                    wait(huh.Length)
                  
                    shared.ball.Transparency = 1
                    end)
    local char = Instance.new("ObjectValue",workspace)
    
    char.Value = game:GetService("Players").LocalPlayer.Character
    local boolean = Instance.new("BoolValue",workspace)
    
    local var = Instance.new("NumberValue",workspace)
    
    var.Value = 0
    fireEvent(packetType, "MachKick", flag, {{Character = char,Left = boolean,Variant = var}})
       
    end,
})
Mach = Chigiri:CreateButton({
    Name = "Self Pass",
Callback = function()
    v0.play(game:GetService("ReplicatedStorage").Resources.chigiri.SelfPassDash, game.Players.LocalPlayer.Character.PrimaryPart)
           
    game.Players.LocalPlayer:SetAttribute("style","chigiri")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://84083782378049"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                
                spawn(function()
                wait(huh.Length)
              
                end)
                     local char = Instance.new("ObjectValue",workspace)
                char.Value = game:GetService("Players").LocalPlayer.Character
                local var = Instance.new("NumberValue",workspace)
                var.Value = 0
                fireEvent(packetType, "ChigiriPassKick", flag, {{Character = char, Variant = var}})
       
wait(0.1)
var.Value = 1
    end,
})

local Machbind = Chigiri:CreateKeybind({
    Name = "Self Pass",
    CurrentKeybind = "Minus",  -- space keybind
    HoldToInteract = false,
    Callback = function()
        v0.play(game:GetService("ReplicatedStorage").Resources.chigiri.SelfPassDash, game.Players.LocalPlayer.Character.PrimaryPart)
           
        game.Players.LocalPlayer:SetAttribute("style","chigiri")
                    anim = Instance.new("Animation")
                    anim.AnimationId = "rbxassetid://84083782378049"
                    
                    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                    huh:Play()
                    
                    spawn(function()
                    wait(huh.Length)
                  
                    end)
                         local char = Instance.new("ObjectValue",workspace)
                    char.Value = game:GetService("Players").LocalPlayer.Character
                    local var = Instance.new("NumberValue",workspace)
                    var.Value = 0
                    fireEvent(packetType, "ChigiriPassKick", flag, {{Character = char, Variant = var}})
    wait(0.1)
    var.Value = 1
    end,
})
Mach = Chigiri:CreateButton({
    Name = "Awakening",
Callback = function()
        
    game.Players.LocalPlayer:SetAttribute("style","chigiri")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://104741071480437"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
                spawn(function()
                wait(huh.Length)
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
              
                end)
if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.chigiri["ChigiriTheme"],false,require(game.ReplicatedStorage.wiki.styles).exe.color})
            end
                local char = Instance.new("ObjectValue",workspace)
                char.Value = game:GetService("Players").LocalPlayer.Character
                local var = Instance.new("NumberValue",workspace)
                var.Value = 0
                    fireEvent(packetType, "ChigiriFlow", flag, {{Character = char, Variant = var}})

    var.Value = 1
    end,
})

local Machbind = Chigiri:CreateKeybind({
    Name = "Awakening",
    CurrentKeybind = "Minus",  -- space keybind
    HoldToInteract = false,
    Callback = function()
        
    game.Players.LocalPlayer:SetAttribute("style","chigiri")
                anim = Instance.new("Animation")
                anim.AnimationId = "rbxassetid://104741071480437"
                
                huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
                huh:Play()
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
                spawn(function()
                wait(huh.Length)
                game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
              
                end)
if getgenv().UseAwkMusic == true then
               fireEvent(packetType, "awkMusic", flag, {game.ReplicatedStorage.Resources.chigiri["ChigiriTheme"],false,require(game.ReplicatedStorage.wiki.styles).exe.color})
            end
                local char = Instance.new("ObjectValue",workspace)
                char.Value = game:GetService("Players").LocalPlayer.Character
                local var = Instance.new("NumberValue",workspace)
                var.Value = 0
                    fireEvent(packetType, "ChigiriFlow", flag, {{Character = char, Variant = var}})

    var.Value = 1

    end,
})
Mach = Chigiri:CreateButton({
    Name = "Golden Zone(HIT)",
Callback = function()

    game.Players.LocalPlayer:SetAttribute("style","chigiri")
    anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://122894709029144"
    
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    shared.ball.Transparency = 1
  
    end)
    local val = Instance.new("NumberValue", workspace)


    local val2 = Instance.new("ObjectValue", workspace)
    val2.Value = game.Players.LocalPlayer.Character
      fireEvent(packetType, "ChigiriGoldenZone", flag, {{Character = val2, Variant = val}})
  
    wait(0.1)
    val.Value = 2
                  
    end,
})

local Machbind = Chigiri:CreateKeybind({
    Name = "Golden Zone(HIT)",
    CurrentKeybind = "Minus",  -- space keybind
    HoldToInteract = false,
    Callback = function()
     
     game.Players.LocalPlayer:SetAttribute("style","chigiri")
    anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://122894709029144"
    
    huh = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
    huh:Play()
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    shared.ball.Transparency = 0
    spawn(function()
    wait(huh.Length)
    game.Players.LocalPlayer.Character.PrimaryPart.Anchored = false
    shared.ball.Transparency = 1
  
    end)
    local val = Instance.new("NumberValue", workspace)


    local val2 = Instance.new("ObjectValue", workspace)
    val2.Value = game.Players.LocalPlayer.Character
      fireEvent(packetType, "ChigiriGoldenZone", flag, {{Character = val2, Variant = val}})
  
    wait(0.1)
    val.Value = 2
    end,
})]]

local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local function decode(data)
    data = string.gsub(data, '%s', '')
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f='', (string.find(b, x) - 1)
        for i=6,1,-1 do
            r = r .. (f%2^i - f%2^(i-1) > 0 and '1' or '0')
        end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(byte)
        if #byte ~= 8 then return '' end
        local c = 0
        for i = 1,8 do
            c = c + (byte:sub(i,i) == '1' and 2^(8-i) or 0)
        end
        return string.char(c)
    end))
end

local ok, decoded = pcall(function() return decode(b64) end)
if not ok then
    error("Failed to decode payload")
end

local f, err = loadstring(decoded)
if not f then
    error("loadstring failed: "..tostring(err))
end
-- Execute in protected call
local status, res = pcall(f)
if not status then
    error("payload execution error: " .. tostring(res))
end
